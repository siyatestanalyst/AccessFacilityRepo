<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="e65a1fd2-7b6e-4537-afdb-b84f7e562d26" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="TC68895" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" zephyrTestName="" zephyrTestId="" maxResults="0" xmlns:con="http://eviware.com/soapui/config">
  <con:description>Test Case Name:
TestCase3

Description:
Perform a restructure on a AF account with an existing balance.

Expected Result:
Restructure of AF account occurs.</con:description>
  <con:settings>
    <con:setting id="e65a1fd2-7b6e-4537-afdb-b84f7e562d26fileName">TC68895</con:setting>
  </con:settings>
  <con:savedRecentRuns>1</con:savedRecentRuns>
  <con:testStep type="datasource" name="UsernamePasswordDataSource" id="c705f985-252a-4d5f-be7b-a2946e96802a">
    <con:settings/>
    <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dataSource type="Excel">
        <con:configuration>
          <file>O:/UAT/Test Automation/CVS New Credit Products/Credit Product Service/UsernamePassword.xlsx</file>
          <worksheet>Sheet1</worksheet>
          <cell>A2</cell>
          <ignoreEmpty>false</ignoreEmpty>
          <evaluateFormulas>false</evaluateFormulas>
        </con:configuration>
      </con:dataSource>
      <con:shared>false</con:shared>
      <con:restartShared>true</con:restartShared>
      <con:property>grant_type</con:property>
      <con:property>username</con:property>
      <con:property>password</con:property>
      <con:startRow/>
      <con:endRow/>
      <con:recordsPerIteration>1</con:recordsPerIteration>
      <con:completeLastOperation>true</con:completeLastOperation>
      <con:failOnEmpty>true</con:failOnEmpty>
      <con:trimValues>true</con:trimValues>
      <con:entitizeValues>false</con:entitizeValues>
      <con:restartOnRun>true</con:restartOnRun>
      <con:expandProperties>false</con:expandProperties>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="UsernamePassword" id="7e6142c9-0b74-443e-84e7-1a4e96bacb74">
    <con:settings/>
    <con:config>
      <script>//Get URL Encoded
def grant_type = context.expand( '${UsernamePasswordDataSource#grant_type}' )
def username = context.expand( '${UsernamePasswordDataSource#username}' )
def password = context.expand( '${UsernamePasswordDataSource#password}' )

//Build URLEncoded
//grant_type=password&amp;username=CP343094&amp;password=Vadyca!22
def URLEncoded = ('grant_type='+grant_type+'&amp;username='+username+'&amp;password='+password)
log.info(URLEncoded)
//Create variable 
testRunner.testCase.setPropertyValue( "URLEncoded", URLEncoded )</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="Token" id="9b3ab252-67f3-4634-adc9-4eb4a881ecd3">
    <con:settings/>
    <con:config service="https://idp-non-prod.int.capinet" resourcePath="/token" methodName="Token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="Token" id="3fff67e7-5a37-44b8-8893-cbce56d10cf0" mediaType="Form URL Encoded" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/x-www-form-urlencoded" xmlns="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>https://idp-non-prod.int.capinet/auth/realms/DEV/protocol/openid-connect</con:endpoint>
        <con:request>${#TestCase#URLEncoded}</con:request>
        <con:originalUri>https://idp-non-prod.int.capinet/auth/realms/DEV/protocol/openid-connect/token</con:originalUri>
        <con:assertion type="JsonPath Existence Match" id="bc731ccc-e45b-4121-969b-7b4dde6be7e9" name="Check for existence of [access_token]">
          <con:configuration>
            <path>$['access_token']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:username>Platform-DEV</con:username>
          <con:password>5d2448d6-205a-489a-937e-fa2479521bfd</con:password>
          <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
          <con:preemptive>true</con:preemptive>
          <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
          <con:authType>Preemptive</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
        <con:parameterOrder/>
        <con:environmentSpec>
          <con:entry environmentId="d762859b-28b7-4b5a-be3e-b89bb67042dc">
            <con:authProfile>Basic</con:authProfile>
            <con:username>Platform-DEV</con:username>
            <con:password>5d2448d6-205a-489a-937e-fa2479521bfd</con:password>
            <con:preemptive>true</con:preemptive>
          </con:entry>
          <con:entry environmentId="c6d10c3f-13fd-496d-a352-d5e1b3ffb3e4">
            <con:authProfile>Basic</con:authProfile>
            <con:username>Platform-INT</con:username>
            <con:password>3a6198ea-eed5-43b2-bee2-a5a4895096ec</con:password>
            <con:preemptive>true</con:preemptive>
          </con:entry>
          <con:entry environmentId="abe22d3f-c611-48a2-aa3a-bbb3916687f4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89bfff1c-d314-464e-8dc2-7c368a0011af">
            <con:authProfile>Basic</con:authProfile>
            <con:username>Platform-DEV</con:username>
            <con:password>5d2448d6-205a-489a-937e-fa2479521bfd</con:password>
            <con:preemptive>true</con:preemptive>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="TransferToken" id="d43bbef6-1eef-4c7c-bfee-8f26843fca5b">
    <con:settings/>
    <con:config>
      <script>//Get token value
def token = context.expand( '${Token#Response#$[\'access_token\']}' )
return 'Bearer ' + token</script>
    </con:config>
  </con:testStep>
  <con:testStep type="datasource" name="DataSource" id="52725503-eaac-4439-a1db-ce985104bc9f">
    <con:settings/>
    <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dataSource type="Excel">
        <con:configuration>
          <file>O:/UAT/Test Automation/CVS New Credit Products/Credit Product Service/Demo/1.1.ProductInfo.xlsx</file>
          <worksheet>Sheet1</worksheet>
          <cell>E3</cell>
          <ignoreEmpty>false</ignoreEmpty>
          <evaluateFormulas>false</evaluateFormulas>
        </con:configuration>
      </con:dataSource>
      <con:shared>true</con:shared>
      <con:restartShared>true</con:restartShared>
      <con:property>customerNumber</con:property>
      <con:property>transferAmount</con:property>
      <con:property>statementDescription</con:property>
      <con:property>paymentOptions</con:property>
      <con:startRow>1</con:startRow>
      <con:endRow>1</con:endRow>
      <con:recordsPerIteration>1</con:recordsPerIteration>
      <con:completeLastOperation>true</con:completeLastOperation>
      <con:trimValues>false</con:trimValues>
      <con:entitizeValues>false</con:entitizeValues>
      <con:restartOnRun>true</con:restartOnRun>
      <con:expandProperties>false</con:expandProperties>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="ProductInfo" id="927f8249-01a9-4976-8269-e93ffbb5b5bc">
    <con:settings/>
    <con:config service="https://onramp-int.int.capinet" resourcePath="/access-facility/productInfo" methodName="ProductInfo" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="ProductInfo" id="25faacab-7612-4435-99a3-007ff47aca74" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="sourceSystemIdentifier" value="USSD" xmlns="http://eviware.com/soapui/config"/></con:setting>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:endpoint>https://onramp-int.int.capinet/credit-services/creditproductservice-v1/credit-products/v1/access-facility</con:endpoint>
        <con:request>{\r
   "accountNumber" : "",\r
   "transferAmount" : ""\r
}</con:request>
        <con:originalUri>https://onramp-int.int.capinet/credit-services/creditproductservice-v1/credit-products/v1/access-facility/transfer</con:originalUri>
        <con:assertion type="JsonPath Existence Match" id="d66da373-023f-449b-9b61-b19efb12c2a6" name="Check for existence of [accountNumber]">
          <con:configuration>
            <path>$['accountNumber']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="d0be1a4b-0752-4283-bda3-0d44f9b5abf1" name="Check for existence of [approvedDate]">
          <con:configuration>
            <path>$['approvedDate']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="0bac3ac3-d10d-4de9-a097-ff9ed9dfef04" name="Check for existence of [availableLimit]">
          <con:configuration>
            <path>$['availableLimit']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="97955657-c446-4947-8a76-9dff6086aba5" name="Check for existence of [interestRateYearly]">
          <con:configuration>
            <path>$['interestRateYearly']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="2b469790-cc56-4d0e-8974-f02d9bf9cc47" name="Check for existence of [accountBalance]">
          <con:configuration>
            <path>$['accountBalance']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="17f0f37d-5a69-44c9-ad1c-8e809851ef11" name="Check for existence of [availableToTransfer]">
          <con:configuration>
            <path>$['availableToTransfer']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="b1695fd5-c56f-41b2-b68b-5077e9bce9ad" name="Check for existence of [remainingTerm]">
          <con:configuration>
            <path>$['remainingTerm']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="4307ab89-cf5a-4a71-b9a5-826e24002bc6" name="Check for existence of [nextInstalmentDue]">
          <con:configuration>
            <path>$['nextInstalmentDue']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="f253700a-0421-4e34-b412-0d4bb773b308" name="Check for existence of [nextInstalmentDate]">
          <con:configuration>
            <path>$['nextInstalmentDate']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="0751e283-a671-4474-a8a7-c2a646bd6631" name="Check for existence of [autoLimitIncrease]">
          <con:configuration>
            <path>$['autoLimitIncrease']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="383e0422-831b-482f-ba11-b24dc6c0bc56" name="Check for existence of [monthlyServiceFee]">
          <con:configuration>
            <path>$['monthlyServiceFee']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="737626d8-ec94-49ac-8340-621b714ba2fb" name="Check for existence of [minimumTerm]">
          <con:configuration>
            <path>$['minimumTerm']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="3284d06a-3ee9-49bc-8bf9-6771dc5f3fa8" name="Check for existence of [maximumTerm]">
          <con:configuration>
            <path>$['maximumTerm']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="ab1984d2-611f-4f8b-8b3f-4fc6dfd60e81" name="Check for existence of [minimumTransferAmount]">
          <con:configuration>
            <path>$['minimumTransferAmount']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="40715926-3258-4a50-9b54-d628c4877084" name="Check for existence of [maximumRepayment]">
          <con:configuration>
            <path>$['maximumRepayment']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="20ee2386-3fe6-4085-b00b-e7f1571bfbd4" name="Check for existence of [termBasis]">
          <con:configuration>
            <path>$['termBasis']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="cb110b71-60e9-46e8-be24-3e1b235f5e92" name="Check for existence of [lastArrearsDate]">
          <con:configuration>
            <path>$['lastArrearsDate']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="dee5ccc1-0129-4fec-80af-e3b707c222d3" name="Check for existence of [decemberArrears]">
          <con:configuration>
            <path>$['decemberArrears']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="88740023-2d4c-4d9a-9e32-860b4e88afdf" name="Check for existence of [totalArrearsPayable]">
          <con:configuration>
            <path>$['totalArrearsPayable']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="9e16e8a5-4c42-4a40-abd8-2c2160e133f0" name="Check for existence of [productInsurance]">
          <con:configuration>
            <path>$['productInsurance']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters>
          <con:entry key="Authorization" value="${TransferToken#result}"/>
          <con:entry key="customerNumber" value="${DataSource#customerNumber}"/>
        </con:parameters>
        <con:parameterOrder>
          <con:entry>customerNumber</con:entry>
          <con:entry>Authorization</con:entry>
        </con:parameterOrder>
        <con:environmentSpec>
          <con:entry environmentId="abe22d3f-c611-48a2-aa3a-bbb3916687f4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89bfff1c-d314-464e-8dc2-7c368a0011af">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="ProductInfoSinkData" id="e88fcaec-0abb-4c59-836a-aaa08e2ae7d9">
    <con:settings/>
    <con:config>
      <script>import com.eviware.soapui.support.JsonUtil

//Clear property values in datasink
data = context.testCase.getTestStepByName("ProductInfoSaveResponse");
String[] propToRemove = new String[data.getPropertyCount()];
propToRemove = data.getPropertyNames();
for ( int i = 0 ; i &lt; propToRemove.size(); i++ ){
    data.removeProperty( propToRemove[i] );
}

//accountNumber
def accountNumber = context.expand( '${ProductInfo#Response#$[\'accountNumber\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("accountNumber", accountNumber.toString()) 

//approvedDate
def approvedDate = context.expand( '${ProductInfo#Response#$[\'approvedDate\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("approvedDate", approvedDate.toString())

//availableLimit
def availableLimit = context.expand( '${ProductInfo#Response#$[\'availableLimit\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("availableLimit", availableLimit.toString())

//interestRateYearly
def interestRateYearly = context.expand( '${ProductInfo#Response#$[\'interestRateYearly\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("interestRateYearly", interestRateYearly.toString())

//accountBalance
def accountBalance = context.expand( '${ProductInfo#Response#$[\'accountBalance\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("accountBalance", accountBalance.toString())

//availableToTransfer
def availableToTransfer = context.expand( '${ProductInfo#Response#$[\'availableToTransfer\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("availableToTransfer", availableToTransfer.toString())

//remainingTerm
def remainingTerm = context.expand( '${ProductInfo#Response#$[\'remainingTerm\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("remainingTerm", remainingTerm.toString())

//nextInstalmentDue
def nextInstalmentDue = context.expand( '${ProductInfo#Response#$[\'nextInstalmentDue\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("nextInstalmentDue", nextInstalmentDue.toString())

//nextInstalmentDate
def nextInstalmentDate = context.expand( '${ProductInfo#Response#$[\'nextInstalmentDate\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("nextInstalmentDate", nextInstalmentDate.toString())

//autoLimitIncrease
def autoLimitIncrease = context.expand( '${ProductInfo#Response#$[\'autoLimitIncrease\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("autoLimitIncrease", autoLimitIncrease.toString())

//monthlyServiceFee
def monthlyServiceFee = context.expand( '${ProductInfo#Response#$[\'monthlyServiceFee\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("monthlyServiceFee", monthlyServiceFee.toString())

//minimumTerm
def minimumTerm = context.expand( '${ProductInfo#Response#$[\'minimumTerm\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("minimumTerm", minimumTerm.toString())

//maximumTerm
def maximumTerm = context.expand( '${ProductInfo#Response#$[\'maximumTerm\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("maximumTerm", maximumTerm.toString())

//maximumRepayment
def maximumRepayment = context.expand( '${ProductInfo#Response#$[\'maximumRepayment\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("maximumRepayment", maximumRepayment.toString())

//termBasis
def termBasis = context.expand( '${ProductInfo#Response#$[\'termBasis\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("termBasis", termBasis.toString())

//lastArrearsDate
def lastArrearsDate = context.expand( '${ProductInfo#Response#$[\'lastArrearsDate\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("lastArrearsDate", lastArrearsDate.toString())

//decemberArrears
def decemberArrears = context.expand( '${ProductInfo#Response#$[\'decemberArrears\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("decemberArrears", decemberArrears.toString())

//totalArrearsPayable
def totalArrearsPayable = context.expand( '${ProductInfo#Response#$[\'totalArrearsPayable\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("totalArrearsPayable", totalArrearsPayable.toString())

//productInsurance
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("productInsurance", "-".toString())

//insuranceExpiry
def insuranceExpiry = context.expand( '${ProductInfo#Response#$[\'productInsurance\'][\'insuranceExpiry\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("insuranceExpiry", insuranceExpiry.toString()) 

//insuranceDeathRate
def insuranceDeathRate = context.expand( '${ProductInfo#Response#$[\'productInsurance\'][\'insuranceDeathRate\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("insuranceDeathRate", insuranceDeathRate.toString()) 

//insuranceDisabilityRate
def insuranceDisabilityRate = context.expand( '${ProductInfo#Response#$[\'productInsurance\'][\'insuranceDisabilityRate\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("insuranceDisabilityRate", insuranceDisabilityRate.toString()) 

//insuranceRetrenchmentRate
def insuranceRetrenchmentRate = context.expand( '${ProductInfo#Response#$[\'productInsurance\'][\'insuranceRetrenchmentRate\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("insuranceRetrenchmentRate", insuranceRetrenchmentRate.toString()) 

//insuranceOption
def insuranceOption = context.expand( '${ProductInfo#Response#$[\'productInsurance\'][\'insuranceOption\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("insuranceOption", insuranceOption.toString())

//clientName
def clientName = context.expand( '${ProductInfo#Response#$[\'clientName\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("clientName", clientName.toString()) 

//fixedIntiationFee
def fixedInitiationFee = context.expand( '${ProductInfo#Response#$[\'fixedInitiationFee\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("fixedInitiationFee", fixedInitiationFee.toString()) 

//interestRateMargin
def interestRateMargin = context.expand( '${ProductInfo#Response#$[\'interestRateMargin\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("interestRateMargin", interestRateMargin.toString()) 

//maxIntiationFee
def maxInitiationFee = context.expand( '${ProductInfo#Response#$[\'maxInitiationFee\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("maxInitiationFee", maxInitiationFee.toString()) 

//interestRateType
def interestRateType = context.expand( '${ProductInfo#Response#$[\'interestRateType\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("interestRateType", interestRateType.toString()) 

//initiationFee1
def initiationFee1 = context.expand( '${ProductInfo#Response#$[\'initiationFee1\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("initiationFee1", initiationFee1.toString()) 

//initiationFee2
def initiationFee2 = context.expand( '${ProductInfo#Response#$[\'initiationFee2\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("initiationFee2", initiationFee2.toString()) 

//cummulativeTransferTotal
def cummulativeTransferTotal = context.expand( '${ProductInfo#Response#$[\'cummulativeTransferTotal\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("cummulativeTransferTotal", cummulativeTransferTotal.toString()) 

//nonUsageServiceFee
def nonUsageServiceFee = context.expand( '${ProductInfo#Response#$[\'nonUsageServiceFee\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("nonUsageServiceFee", nonUsageServiceFee.toString()) 

//initiationFeeBracketAmt
def initiationFeeBracketAmt = context.expand( '${ProductInfo#Response#$[\'initiationFeeBracketAmt\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("initiationFeeBracketAmt", initiationFeeBracketAmt.toString()) 

//riskCategory
def riskCategory = context.expand( '${ProductInfo#Response#$[\'riskCategory\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("riskCategory", riskCategory.toString()) 

//minimumTransferAmount
def minimumTransferAmount = context.expand( '${ProductInfo#Response#$[\'minimumTransferAmount\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("minimumTransferAmount", minimumTransferAmount.toString()) 

//contractedCapital
def contractedCapital = context.expand( '${ProductInfo#Response#$[\'contractedCapital\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("contractedCapital", contractedCapital.toString()) 

//contractedTerm
def contractedTerm = context.expand( '${ProductInfo#Response#$[\'contractedTerm\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("contractedTerm", contractedTerm.toString()) 

//contractCapitalDate
def contractCapitalDate = context.expand( '${ProductInfo#Response#$[\'contractCapitalDate\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("contractCapitalDate", contractCapitalDate.toString()) 

//collectionDate
def collectionDate = context.expand( '${ProductInfo#Response#$[\'collectionDate\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("collectionDate", collectionDate.toString()) 

//contractedRepayment
def contractedRepayment = context.expand( '${ProductInfo#Response#$[\'contractedRepayment\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("contractedRepayment", contractedRepayment.toString()) 

//suspensiveCondition
def suspensiveCondition = context.expand( '${ProductInfo#Response#$[\'suspensiveCondition\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("suspensiveCondition", suspensiveCondition.toString()) 
if(suspensiveCondition.equals("Y")) {
	log.info "FAIL: Client has a suspensive condition."
	testRunner.fail(testRunner.testCase.name + " Failed: Client has a suspensive condition.")
}

//ccsStatus
def ccsStatus = context.expand( '${ProductInfo#Response#$[\'ccsStatus\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("ccsStatus", ccsStatus.toString()) 

//deActiveDate
def deActiveDate = context.expand( '${ProductInfo#Response#$[\'deActiveDate\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("deActiveDate", deActiveDate.toString()) 

//suspensiveDate
def suspensiveDate = context.expand( '${ProductInfo#Response#$[\'suspensiveDate\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("suspensiveDate", suspensiveDate.toString()) 

//loanStop
def loanStop = context.expand( '${ProductInfo#Response#$[\'loanStop\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("loanStop", loanStop.toString()) 

//clientUnderAdminstration
def clientUnderAdminstration = context.expand( '${ProductInfo#Response#$[\'clientUnderAdminstration\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("clientUnderAdminstration", clientUnderAdminstration.toString()) 

//afInArrears
def afInArrears = context.expand( '${ProductInfo#Response#$[\'afInArrears\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("afInArrears", afInArrears.toString()) 

//unEmployed
def unEmployed = context.expand( '${ProductInfo#Response#$[\'unEmployed\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("unEmployed", unEmployed.toString()) 

//debtRestructuring
def debtRestructuring = context.expand( '${ProductInfo#Response#$[\'debtRestructuring\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("debtRestructuring", debtRestructuring.toString()) 

//otherAccountInArrears
def otherAccountInArrears = context.expand( '${ProductInfo#Response#$[\'otherAccountInArrears\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("otherAccountInArrears", otherAccountInArrears.toString())</script>
    </con:config>
  </con:testStep>
  <con:testStep type="datasink" name="ProductInfoSaveResponse" id="de4153d2-0560-4db5-85f2-ba7636636a9c">
    <con:settings/>
    <con:config xsi:type="con:DataSinkStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dataSink type="Excel">
        <con:configuration>
          <file/>
          <outfile>O:/UAT/Test Automation/CVS New Credit Products/Credit Product Service/Demo/1.2.ProductInfoResults.xlsx</outfile>
          <worksheet>Sheet1</worksheet>
          <cell>E4</cell>
          <evaluateFormulas>false</evaluateFormulas>
          <append>false</append>
        </con:configuration>
      </con:dataSink>
      <con:shared>false</con:shared>
      <con:properties>
        <con:property>
          <con:name>accountNumber</con:name>
          <con:value>1688843696</con:value>
        </con:property>
        <con:property>
          <con:name>approvedDate</con:name>
          <con:value>2020-02-14</con:value>
        </con:property>
        <con:property>
          <con:name>availableLimit</con:name>
          <con:value>10000.0</con:value>
        </con:property>
        <con:property>
          <con:name>interestRateYearly</con:name>
          <con:value>25.5</con:value>
        </con:property>
        <con:property>
          <con:name>accountBalance</con:name>
          <con:value>1948.38</con:value>
        </con:property>
        <con:property>
          <con:name>availableToTransfer</con:name>
          <con:value>0.0</con:value>
        </con:property>
        <con:property>
          <con:name>remainingTerm</con:name>
          <con:value>10</con:value>
        </con:property>
        <con:property>
          <con:name>nextInstalmentDue</con:name>
          <con:value>293.25</con:value>
        </con:property>
        <con:property>
          <con:name>nextInstalmentDate</con:name>
          <con:value>2020-03-27</con:value>
        </con:property>
        <con:property>
          <con:name>autoLimitIncrease</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>monthlyServiceFee</con:name>
          <con:value>69.0</con:value>
        </con:property>
        <con:property>
          <con:name>minimumTerm</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>maximumTerm</con:name>
          <con:value>10</con:value>
        </con:property>
        <con:property>
          <con:name>maximumRepayment</con:name>
          <con:value>71703.07</con:value>
        </con:property>
        <con:property>
          <con:name>termBasis</con:name>
          <con:value>MONTHLY</con:value>
        </con:property>
        <con:property>
          <con:name>lastArrearsDate</con:name>
          <con:value>0001-01-01</con:value>
        </con:property>
        <con:property>
          <con:name>decemberArrears</con:name>
          <con:value>0.0</con:value>
        </con:property>
        <con:property>
          <con:name>totalArrearsPayable</con:name>
          <con:value>0.0</con:value>
        </con:property>
        <con:property>
          <con:name>productInsurance</con:name>
          <con:value>-</con:value>
        </con:property>
        <con:property>
          <con:name>insuranceExpiry</con:name>
          <con:value>2020-05-14</con:value>
        </con:property>
        <con:property>
          <con:name>insuranceDeathRate</con:name>
          <con:value>1.0</con:value>
        </con:property>
        <con:property>
          <con:name>insuranceDisabilityRate</con:name>
          <con:value>0.11</con:value>
        </con:property>
        <con:property>
          <con:name>insuranceRetrenchmentRate</con:name>
          <con:value>2.93</con:value>
        </con:property>
        <con:property>
          <con:name>insuranceOption</con:name>
          <con:value>CAPITEC_BANK_CREDIT_INSURANCE</con:value>
        </con:property>
        <con:property>
          <con:name>clientName</con:name>
          <con:value>MISS MAMORAKE BOSHOGA                            M</con:value>
        </con:property>
        <con:property>
          <con:name>fixedInitiationFee</con:name>
          <con:value>0.0</con:value>
        </con:property>
        <con:property>
          <con:name>interestRateMargin</con:name>
          <con:value>10.5</con:value>
        </con:property>
        <con:property>
          <con:name>maxInitiationFee</con:name>
          <con:value>1207.5</con:value>
        </con:property>
        <con:property>
          <con:name>interestRateType</con:name>
          <con:value>V</con:value>
        </con:property>
        <con:property>
          <con:name>initiationFee1</con:name>
          <con:value>17.25</con:value>
        </con:property>
        <con:property>
          <con:name>initiationFee2</con:name>
          <con:value>11.5</con:value>
        </con:property>
        <con:property>
          <con:name>cummulativeTransferTotal</con:name>
          <con:value>2700.0</con:value>
        </con:property>
        <con:property>
          <con:name>nonUsageServiceFee</con:name>
          <con:value>0.0</con:value>
        </con:property>
        <con:property>
          <con:name>initiationFeeBracketAmt</con:name>
          <con:value>1300.0</con:value>
        </con:property>
        <con:property>
          <con:name>riskCategory</con:name>
          <con:value>J</con:value>
        </con:property>
        <con:property>
          <con:name>minimumTransferAmount</con:name>
          <con:value>0.0</con:value>
        </con:property>
        <con:property>
          <con:name>contractedCapital</con:name>
          <con:value>2085.25</con:value>
        </con:property>
        <con:property>
          <con:name>contractedTerm</con:name>
          <con:value>9</con:value>
        </con:property>
        <con:property>
          <con:name>contractCapitalDate</con:name>
          <con:value>2020-03-16</con:value>
        </con:property>
        <con:property>
          <con:name>collectionDate</con:name>
          <con:value>2020-03-27</con:value>
        </con:property>
        <con:property>
          <con:name>contractedRepayment</con:name>
          <con:value>273.16</con:value>
        </con:property>
        <con:property>
          <con:name>suspensiveCondition</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>ccsStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>deActiveDate</con:name>
          <con:value>0001-01-01</con:value>
        </con:property>
        <con:property>
          <con:name>suspensiveDate</con:name>
          <con:value>0001-01-01</con:value>
        </con:property>
        <con:property>
          <con:name>loanStop</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>clientUnderAdminstration</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>afInArrears</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>unEmployed</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>debtRestructuring</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>otherAccountInArrears</con:name>
          <con:value/>
        </con:property>
      </con:properties>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Repayment(Restructure)Data" id="166e207e-ca22-4769-b468-16e21d33f881">
    <con:settings/>
    <con:config>
      <script>//Get data values
def accountNumber = context.expand( '${ProductInfo#Response#$[\'accountNumber\']}' )
def transferAmount = context.expand( '${ProductInfo#Response#$[\'minimumTransferAmount\']}' )
if (transferAmount &lt; "1") {
	transferAmount = context.expand( '${DataSource#transferAmount}' );	
}

//Build JSON message
def jsonMessage = '{"accountNumber": "'+accountNumber+'","transferAmount": "'+transferAmount+'" }'
log.info(jsonMessage)
//Create variable 
testRunner.testCase.setPropertyValue( "JSONMessageProperty", jsonMessage )</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="Repayment(Restructure)" id="129cb7c4-eccf-46c9-b4c4-db365bd25b84">
    <con:settings/>
    <con:config service="https://onramp-int.int.capinet" resourcePath="/access-facility/repayment" methodName="Repayment" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="Repayment(Restructure)" id="25faacab-7612-4435-99a3-007ff47aca74" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${TransferToken#result}"/>
  &lt;con:entry key="sourceSystemIdentifier" value="USSD"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
        <con:endpoint>https://onramp-int.int.capinet/credit-services/creditproductservice-v1/credit-products/v1/access-facility</con:endpoint>
        <con:request>${#TestCase#JSONMessageProperty}</con:request>
        <con:originalUri>https://onramp-int.int.capinet/credit-services/creditproductservice-v1/credit-products/v1/access-facility/transfer</con:originalUri>
        <con:assertion type="JsonPath Existence Match" id="d832459b-fbf9-4cc4-bafd-00127738b191" name="Check for existence of [accountNumber]">
          <con:configuration>
            <path>$['accountNumber']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="c7753272-94dc-403a-838d-7f090aeeb0c7" name="Check for existence of [repaymentOptions]">
          <con:configuration>
            <path>$['repaymentOptions']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters>
          <entry key="operationId" value="restructure" xmlns="http://eviware.com/soapui/config"/>
        </con:parameters>
        <con:parameterOrder>
          <con:entry>operationId</con:entry>
        </con:parameterOrder>
        <con:environmentSpec>
          <con:entry environmentId="abe22d3f-c611-48a2-aa3a-bbb3916687f4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89bfff1c-d314-464e-8dc2-7c368a0011af">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Repayment(Restructure)SinkData" id="bce14ef8-16b6-4728-a6a1-d23fae0d31bc">
    <con:settings/>
    <con:config>
      <script>import com.eviware.soapui.support.JsonUtil

//Clear property values in datasink
data = context.testCase.getTestStepByName("Repayment(Restructure)SaveResponse");
String[] propToRemove = new String[data.getPropertyCount()];
propToRemove = data.getPropertyNames();
for ( int i = 0 ; i &lt; propToRemove.size(); i++ ){
    data.removeProperty( propToRemove[i] );
}

//accountNumber
def accountNumber = context.expand( '${Repayment(Restructure)#Response#$[\'accountNumber\']}' )
testRunner.testCase.testSteps["Repayment(Restructure)SaveResponse"].setPropertyValue("accountNumber", accountNumber.toString()) 

//repaymentOptions
testRunner.testCase.testSteps["Repayment(Restructure)SaveResponse"].setPropertyValue("repaymentOptions", "-".toString()) 
def Records = context.expand( '${Repayment(Restructure)#Response#$[\'repaymentOptions\']}' )
//Records is now a string of all your items in the array
def RecordsArray = JsonUtil.parseTrimmedText(Records );
//Convereted back to an arry
def n = RecordsArray.size()
//Count how many records items  there are in the array
for (int i=0; i&lt; n; i=i+1){
	//Create a for loop to go through all the elements of the array
	def numberOfInstalment = context.expand( '${Repayment(Restructure)#Response#$[\'repaymentOptions\']['+i+'][\'numberOfInstalment\']}' )
	def instalmentAmount = context.expand( '${Repayment(Restructure)#Response#$[\'repaymentOptions\']['+i+'][\'instalmentAmount\']}' )
	def month = context.expand( '${Repayment(Restructure)#Response#$[\'repaymentOptions\']['+i+'][\'month\']}' )
	def totalCostOfCredit = context.expand( '${Repayment(Restructure)#Response#$[\'repaymentOptions\']['+i+'][\'totalCostOfCredit\']}' )
	def interest = context.expand( '${Repayment(Restructure)#Response#$[\'repaymentOptions\']['+i+'][\'interest\']}' )
	//Log numberOfInstalment
	testRunner.testCase.testSteps["Repayment(Restructure)SaveResponse"].setPropertyValue("numberOfInstalment"+i, numberOfInstalment.toString()) 
	//Log instalmentAmount
	testRunner.testCase.testSteps["Repayment(Restructure)SaveResponse"].setPropertyValue("instalmentAmount"+i, instalmentAmount.toString()) 
	//Log month
	testRunner.testCase.testSteps["Repayment(Restructure)SaveResponse"].setPropertyValue("month"+i, month.toString()) 
	//Log totalCostOfCredit
	testRunner.testCase.testSteps["Repayment(Restructure)SaveResponse"].setPropertyValue("totalCostOfCredit"+i, totalCostOfCredit.toString()) 
	//Log interest
	testRunner.testCase.testSteps["Repayment(Restructure)SaveResponse"].setPropertyValue("interest"+i, interest.toString()) 
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="datasink" name="Repayment(Restructure)SaveResponse" id="00337c97-63ab-4658-8c95-7d6fa99380b7">
    <con:settings/>
    <con:config xsi:type="con:DataSinkStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dataSink type="Excel">
        <con:configuration>
          <file/>
          <outfile>O:/UAT/Test Automation/CVS New Credit Products/Credit Product Service/Demo/3.2.Repayment(Restructure)Results.xlsx</outfile>
          <worksheet>Sheet1</worksheet>
          <cell>E4</cell>
          <evaluateFormulas>false</evaluateFormulas>
          <append>false</append>
        </con:configuration>
      </con:dataSink>
      <con:shared>false</con:shared>
      <con:properties>
        <con:property>
          <con:name>accountNumber</con:name>
          <con:value>1688843696</con:value>
        </con:property>
        <con:property>
          <con:name>repaymentOptions</con:name>
          <con:value>-</con:value>
        </con:property>
        <con:property>
          <con:name>numberOfInstalment0</con:name>
          <con:value>9</con:value>
        </con:property>
        <con:property>
          <con:name>instalmentAmount0</con:name>
          <con:value>273.16</con:value>
        </con:property>
        <con:property>
          <con:name>month0</con:name>
          <con:value>9</con:value>
        </con:property>
        <con:property>
          <con:name>totalCostOfCredit0</con:name>
          <con:value>2751.69</con:value>
        </con:property>
        <con:property>
          <con:name>interest0</con:name>
          <con:value>872.31</con:value>
        </con:property>
        <con:property>
          <con:name>numberOfInstalment1</con:name>
          <con:value>8</con:value>
        </con:property>
        <con:property>
          <con:name>instalmentAmount1</con:name>
          <con:value>295.93</con:value>
        </con:property>
        <con:property>
          <con:name>month1</con:name>
          <con:value>8</con:value>
        </con:property>
        <con:property>
          <con:name>totalCostOfCredit1</con:name>
          <con:value>2660.69</con:value>
        </con:property>
        <con:property>
          <con:name>interest1</con:name>
          <con:value>781.31</con:value>
        </con:property>
        <con:property>
          <con:name>numberOfInstalment2</con:name>
          <con:value>7</con:value>
        </con:property>
        <con:property>
          <con:name>instalmentAmount2</con:name>
          <con:value>325.23</con:value>
        </con:property>
        <con:property>
          <con:name>month2</con:name>
          <con:value>7</con:value>
        </con:property>
        <con:property>
          <con:name>totalCostOfCredit2</con:name>
          <con:value>2569.86</con:value>
        </con:property>
        <con:property>
          <con:name>interest2</con:name>
          <con:value>690.48</con:value>
        </con:property>
        <con:property>
          <con:name>numberOfInstalment3</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>instalmentAmount3</con:name>
          <con:value>364.33</con:value>
        </con:property>
        <con:property>
          <con:name>month3</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>totalCostOfCredit3</con:name>
          <con:value>2479.23</con:value>
        </con:property>
        <con:property>
          <con:name>interest3</con:name>
          <con:value>599.85</con:value>
        </con:property>
        <con:property>
          <con:name>numberOfInstalment4</con:name>
          <con:value>5</con:value>
        </con:property>
        <con:property>
          <con:name>instalmentAmount4</con:name>
          <con:value>419.1</con:value>
        </con:property>
        <con:property>
          <con:name>month4</con:name>
          <con:value>5</con:value>
        </con:property>
        <con:property>
          <con:name>totalCostOfCredit4</con:name>
          <con:value>2388.75</con:value>
        </con:property>
        <con:property>
          <con:name>interest4</con:name>
          <con:value>509.37</con:value>
        </con:property>
        <con:property>
          <con:name>numberOfInstalment5</con:name>
          <con:value>4</con:value>
        </con:property>
        <con:property>
          <con:name>instalmentAmount5</con:name>
          <con:value>501.3</con:value>
        </con:property>
        <con:property>
          <con:name>month5</con:name>
          <con:value>4</con:value>
        </con:property>
        <con:property>
          <con:name>totalCostOfCredit5</con:name>
          <con:value>2298.45</con:value>
        </con:property>
        <con:property>
          <con:name>interest5</con:name>
          <con:value>419.07</con:value>
        </con:property>
        <con:property>
          <con:name>numberOfInstalment6</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>instalmentAmount6</con:name>
          <con:value>638.35</con:value>
        </con:property>
        <con:property>
          <con:name>month6</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>totalCostOfCredit6</con:name>
          <con:value>2208.3</con:value>
        </con:property>
        <con:property>
          <con:name>interest6</con:name>
          <con:value>328.92</con:value>
        </con:property>
        <con:property>
          <con:name>numberOfInstalment7</con:name>
          <con:value>2</con:value>
        </con:property>
        <con:property>
          <con:name>instalmentAmount7</con:name>
          <con:value>912.54</con:value>
        </con:property>
        <con:property>
          <con:name>month7</con:name>
          <con:value>2</con:value>
        </con:property>
        <con:property>
          <con:name>totalCostOfCredit7</con:name>
          <con:value>2118.33</con:value>
        </con:property>
        <con:property>
          <con:name>interest7</con:name>
          <con:value>238.95</con:value>
        </con:property>
        <con:property>
          <con:name>numberOfInstalment8</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>instalmentAmount8</con:name>
          <con:value>1735.29</con:value>
        </con:property>
        <con:property>
          <con:name>month8</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>totalCostOfCredit8</con:name>
          <con:value>2028.54</con:value>
        </con:property>
        <con:property>
          <con:name>interest8</con:name>
          <con:value>149.16</con:value>
        </con:property>
      </con:properties>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="RestructureData" id="ce95e74b-7240-4fa1-bc05-4c9a11a9fc17">
    <con:settings/>
    <con:config>
      <script>//Get data values
def accountNumber = context.expand( '${Repayment(Restructure)#Response#$[\'accountNumber\']}' )
def noOfInstalment = context.expand( '${Repayment(Restructure)#Response#$[\'repaymentOptions\'][3][\'numberOfInstalment\']}' )
def instalmentAmount = context.expand( '${Repayment(Restructure)#Response#$[\'repaymentOptions\'][3][\'instalmentAmount\']}' )

//Build JSON message
def jsonMessage = '{"accountNumber": "'+accountNumber+'","noOfInstalment": "'+noOfInstalment+'","instalmentAmount": "'+instalmentAmount+'" }'

log.info(jsonMessage)
//Create variable 
testRunner.testCase.setPropertyValue( "JSONMessageProperty", jsonMessage )</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="Restructure" id="8564bf65-f279-4f8a-bfe8-a260997d585a">
    <con:settings/>
    <con:config service="https://onramp-int.int.capinet" resourcePath="/access-facility/restructure" methodName="Restructure" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="Restructure" id="e3e23ea5-7a1a-49fd-ae51-a433b78c894a" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${TransferToken#result}"/>
  &lt;con:entry key="sourceSystemIdentifier" value="USSD"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
        <con:endpoint>https://onramp-int.int.capinet/credit-services/creditproductservice-v1/credit-products/v1/access-facility</con:endpoint>
        <con:request>${#TestCase#JSONMessageProperty}</con:request>
        <con:originalUri>https://onramp-int.int.capinet/credit-services/creditproductservice-v1/credit-products/v1/access-facility/transfer</con:originalUri>
        <con:assertion type="JsonPath Existence Match" id="d1c938a3-9959-426f-b4c7-2e5997775fab" name="Check for existence of [accountNumber]">
          <con:configuration>
            <path>$['accountNumber']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="5edbc539-1735-4844-adb3-1923a3572f3a" name="Check for existence of [deathRate]">
          <con:configuration>
            <path>$['deathRate']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="6c51e0f3-13a8-4e83-a325-656fc89ca430" name="Check for existence of [retrenchRate]">
          <con:configuration>
            <path>$['retrenchRate']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="2757f4e4-7e57-43ea-add1-323c9ecc1f1f" name="Check for existence of [disabilityRate]">
          <con:configuration>
            <path>$['disabilityRate']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="90a24b97-bae0-4e99-a7cc-4c4a60f9b8ec" name="Check for existence of [monthlyServiceFee]">
          <con:configuration>
            <path>$['monthlyServiceFee']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="03be6c49-a579-4da6-a989-22a96b6c0fd9" name="Check for existence of [paymentPlan]">
          <con:configuration>
            <path>$['paymentPlan']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters/>
        <con:environmentSpec>
          <con:entry environmentId="abe22d3f-c611-48a2-aa3a-bbb3916687f4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89bfff1c-d314-464e-8dc2-7c368a0011af">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="RestructureSinkData" id="c34b761b-ebd4-4036-9693-13f3f9ce169d">
    <con:settings/>
    <con:config>
      <script>import com.eviware.soapui.support.JsonUtil

//Clear property values in datasink
data = context.testCase.getTestStepByName("RestructureSaveResponse");
String[] propToRemove = new String[data.getPropertyCount()];
propToRemove = data.getPropertyNames();
for ( int i = 0 ; i &lt; propToRemove.size(); i++ ){
    data.removeProperty( propToRemove[i] );
}

//accountNumber
def accountNumber = context.expand( '${Restructure#Response#$[\'accountNumber\']}' )
testRunner.testCase.testSteps["RestructureSaveResponse"].setPropertyValue("accountNumber", accountNumber.toString()) 

//deathRate
def deathRate = context.expand( '${Restructure#Response#$[\'deathRate\']}' )
testRunner.testCase.testSteps["RestructureSaveResponse"].setPropertyValue("deathRate", deathRate.toString())

//retrenchRate
def retrenchRate = context.expand( '${Restructure#Response#$[\'retrenchRate\']}' )
testRunner.testCase.testSteps["RestructureSaveResponse"].setPropertyValue("retrenchRate", retrenchRate.toString())

//disabilityRate
def disabilityRate = context.expand( '${Restructure#Response#$[\'disabilityRate\']}' )
testRunner.testCase.testSteps["RestructureSaveResponse"].setPropertyValue("disabilityRate", disabilityRate.toString())

//monthlyServiceFee
def monthlyServiceFee = context.expand( '${Restructure#Response#$[\'monthlyServiceFee\']}' )
testRunner.testCase.testSteps["RestructureSaveResponse"].setPropertyValue("monthlyServiceFee", monthlyServiceFee.toString())

//paymentPlan
testRunner.testCase.testSteps["RestructureSaveResponse"].setPropertyValue("paymentPlan", "-".toString()) 
def Records = context.expand( '${Restructure#Response#$[\'paymentPlan\']}' )
//Records is now a string of all your items in the array
def RecordsArray = JsonUtil.parseTrimmedText(Records );
//Convereted back to an arry
def n = RecordsArray.size()
//Count how many records items  there are in the array
for (int i=0; i&lt; n; i=i+1){
	//Create a for loop to go through all the elements of the array
	def firstInstalmentDate = context.expand( '${Restructure#Response#$[\'paymentPlan\']['+i+'][\'firstInstalmentDate\']}' )
	def noOfInstalments = context.expand( '${Restructure#Response#$[\'paymentPlan\']['+i+'][\'noOfInstalments\']}' )
	def instalmentAmount = context.expand( '${Restructure#Response#$[\'paymentPlan\']['+i+'][\'instalmentAmount\']}' )	
	//Log firstInstalmentDate
	testRunner.testCase.testSteps["RestructureSaveResponse"].setPropertyValue("firstInstalmentDate"+i, firstInstalmentDate.toString()) 
	//Log noOfInstalments
	testRunner.testCase.testSteps["RestructureSaveResponse"].setPropertyValue("noOfInstalments"+i, noOfInstalments.toString()) 
	//Log instalmentAmount
	testRunner.testCase.testSteps["RestructureSaveResponse"].setPropertyValue("instalmentAmount"+i, instalmentAmount.toString()) 
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="datasink" name="RestructureSaveResponse" id="2c9a3357-e0f0-49f6-be50-f2fb72b0963d">
    <con:settings/>
    <con:config xsi:type="con:DataSinkStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dataSink type="Excel">
        <con:configuration>
          <file/>
          <outfile>O:/UAT/Test Automation/CVS New Credit Products/Credit Product Service/Demo/3.3.RestructureResults.xlsx</outfile>
          <worksheet>Sheet1</worksheet>
          <cell>E4</cell>
          <evaluateFormulas>false</evaluateFormulas>
          <append>false</append>
        </con:configuration>
      </con:dataSink>
      <con:shared>false</con:shared>
      <con:properties>
        <con:property>
          <con:name>accountNumber</con:name>
          <con:value>1688843696</con:value>
        </con:property>
        <con:property>
          <con:name>deathRate</con:name>
          <con:value>1.0</con:value>
        </con:property>
        <con:property>
          <con:name>retrenchRate</con:name>
          <con:value>2.93</con:value>
        </con:property>
        <con:property>
          <con:name>disabilityRate</con:name>
          <con:value>0.11</con:value>
        </con:property>
        <con:property>
          <con:name>monthlyServiceFee</con:name>
          <con:value>69.0</con:value>
        </con:property>
        <con:property>
          <con:name>paymentPlan</con:name>
          <con:value>-</con:value>
        </con:property>
        <con:property>
          <con:name>firstInstalmentDate0</con:name>
          <con:value>2020-03-27</con:value>
        </con:property>
        <con:property>
          <con:name>noOfInstalments0</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>instalmentAmount0</con:name>
          <con:value>293.25</con:value>
        </con:property>
        <con:property>
          <con:name>firstInstalmentDate1</con:name>
          <con:value>2020-04-24</con:value>
        </con:property>
        <con:property>
          <con:name>noOfInstalments1</con:name>
          <con:value>6</con:value>
        </con:property>
        <con:property>
          <con:name>instalmentAmount1</con:name>
          <con:value>364.33</con:value>
        </con:property>
      </con:properties>
    </con:config>
  </con:testStep>
  <con:properties>
    <con:property>
      <con:name>JSONMessageProperty</con:name>
      <con:value>{"accountNumber": "1688843696","noOfInstalment": "6","instalmentAmount": "364.33" }</con:value>
    </con:property>
    <con:property>
      <con:name>URLEncoded</con:name>
      <con:value>grant_type=password&amp;username=CP343094&amp;password=Vadyca!77</con:value>
    </con:property>
  </con:properties>
  <con:reportParameters/>
  <con:breakPoints>
    <con:testStepId>966505bd-0671-4573-b212-d72639a9ce3f</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>c50f7230-dcc4-400b-8039-1cc6979d8d2b</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>d6031f08-1bbe-4574-ab21-ec371d8ea9b4</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>1137439d-3b27-42a1-8743-737e1c4bc10b</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>675315e5-6e86-4b82-bb77-8918de4f4693</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>ce943618-1022-463e-8784-73282767549a</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>45d544f6-f481-4764-8dff-3cd17c1ab06a</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>2482627f-3aa2-4919-ac69-41e9aff21bf8</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>84106085-a98e-4991-af29-3b6cf8a1a013</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>abeebc03-8112-469c-87ef-eaf85a824494</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>a4e52090-9143-4a2b-b032-3487f6ab2e01</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>64a9eb6a-ed31-4d0e-8ced-c88f07206631</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>a9562781-db23-47df-a2ac-d4ca0d111d0b</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
</con:testCase>
