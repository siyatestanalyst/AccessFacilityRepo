<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="30ac4795-f0d8-4b8b-b333-93430d0aef46" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="TC68577" searchProperties="true" timeout="0" maxResults="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" zephyrTestName="" zephyrTestId="" disabled="true" xmlns:con="http://eviware.com/soapui/config">
  <con:description>Test Case Name:
Close AF with existing balance and account in arrears

Description:
Close a AF account that is in arrears and perform following transactions: 13000 Discharge request 13045 Discharge via cash repayment.

Expected Result:
Correct discharge figure must be displayed 
•Include Initiation fee 
•Include accrued interest
•Include Service fee
•Include CBCI if applicableBalance must be 0 and loan must be settled.</con:description>
  <con:settings>
    <con:setting id="30ac4795-f0d8-4b8b-b333-93430d0aef46fileName">TC68577</con:setting>
  </con:settings>
  <con:savedRecentRuns>1</con:savedRecentRuns>
  <con:testStep type="datasource" name="UsernamePasswordDataSource" id="da3480d7-e7c7-4515-91b9-8fdee763e676">
    <con:settings/>
    <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dataSource type="Excel">
        <con:configuration>
          <file>O:/UAT/Test Automation/CVS New Credit Products/Credit Product Service/UsernamePassword.xlsx</file>
          <worksheet>Sheet1</worksheet>
          <cell>A2</cell>
          <ignoreEmpty>false</ignoreEmpty>
          <evaluateFormulas>false</evaluateFormulas>
        </con:configuration>
      </con:dataSource>
      <con:shared>false</con:shared>
      <con:restartShared>true</con:restartShared>
      <con:property>grant_type</con:property>
      <con:property>username</con:property>
      <con:property>password</con:property>
      <con:startRow/>
      <con:endRow/>
      <con:recordsPerIteration>1</con:recordsPerIteration>
      <con:completeLastOperation>true</con:completeLastOperation>
      <con:failOnEmpty>true</con:failOnEmpty>
      <con:trimValues>true</con:trimValues>
      <con:entitizeValues>false</con:entitizeValues>
      <con:restartOnRun>true</con:restartOnRun>
      <con:expandProperties>false</con:expandProperties>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="UsernamePassword" id="dcb70829-bf57-40fd-913d-71ca6f260337">
    <con:settings/>
    <con:config>
      <script>//Get URL Encoded
def grant_type = context.expand( '${UsernamePasswordDataSource#grant_type}' )
def username = context.expand( '${UsernamePasswordDataSource#username}' )
def password = context.expand( '${UsernamePasswordDataSource#password}' )

//Build URLEncoded
//grant_type=password&amp;username=CP343094&amp;password=Vadyca!22
def URLEncoded = ('grant_type='+grant_type+'&amp;username='+username+'&amp;password='+password)
log.info(URLEncoded)
//Create variable 
testRunner.testCase.setPropertyValue( "URLEncoded", URLEncoded )</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="Token" id="f0482556-b124-4d66-b4f7-946acc170ad1">
    <con:settings/>
    <con:config service="https://idp-non-prod.int.capinet" resourcePath="/token" methodName="Token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="Token" id="3fff67e7-5a37-44b8-8893-cbce56d10cf0" mediaType="Form URL Encoded" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/x-www-form-urlencoded" xmlns="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>https://idp-non-prod.int.capinet/auth/realms/DEV/protocol/openid-connect</con:endpoint>
        <con:request>${#TestCase#URLEncoded}</con:request>
        <con:originalUri>https://idp-non-prod.int.capinet/auth/realms/DEV/protocol/openid-connect/token</con:originalUri>
        <con:assertion type="JsonPath Existence Match" id="bc731ccc-e45b-4121-969b-7b4dde6be7e9" name="Check for existence of [access_token]">
          <con:configuration>
            <path>$['access_token']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:username>Platform-DEV</con:username>
          <con:password>5d2448d6-205a-489a-937e-fa2479521bfd</con:password>
          <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
          <con:preemptive>true</con:preemptive>
          <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
          <con:authType>Preemptive</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
        <con:parameterOrder/>
        <con:environmentSpec>
          <con:entry environmentId="d762859b-28b7-4b5a-be3e-b89bb67042dc">
            <con:authProfile>Basic</con:authProfile>
            <con:username>Platform-DEV</con:username>
            <con:password>5d2448d6-205a-489a-937e-fa2479521bfd</con:password>
            <con:preemptive>true</con:preemptive>
          </con:entry>
          <con:entry environmentId="c6d10c3f-13fd-496d-a352-d5e1b3ffb3e4">
            <con:authProfile>Basic</con:authProfile>
            <con:username>Platform-INT</con:username>
            <con:password>3a6198ea-eed5-43b2-bee2-a5a4895096ec</con:password>
            <con:preemptive>true</con:preemptive>
          </con:entry>
          <con:entry environmentId="abe22d3f-c611-48a2-aa3a-bbb3916687f4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89bfff1c-d314-464e-8dc2-7c368a0011af">
            <con:authProfile>Basic</con:authProfile>
            <con:username>Platform-DEV</con:username>
            <con:password>5d2448d6-205a-489a-937e-fa2479521bfd</con:password>
            <con:preemptive>true</con:preemptive>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="TransferToken" id="9bc84afd-cfcc-4795-834e-f4f62722a8c2">
    <con:settings/>
    <con:config>
      <script>//Get token value
def token = context.expand( '${Token#Response#$[\'access_token\']}' )
return 'Bearer ' + token</script>
    </con:config>
  </con:testStep>
  <con:testStep type="datasource" name="DataSource" id="7a4fad49-c19e-48ca-a703-c1b2740660f1">
    <con:settings/>
    <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dataSource type="Excel">
        <con:configuration>
          <file>O:/UAT/Test Automation/CVS New Credit Products/Credit Product Service/CloseAF/1.ProductInfo.xlsx</file>
          <worksheet>Sheet1</worksheet>
          <cell>E3</cell>
          <ignoreEmpty>false</ignoreEmpty>
          <evaluateFormulas>false</evaluateFormulas>
        </con:configuration>
      </con:dataSource>
      <con:shared>true</con:shared>
      <con:restartShared>true</con:restartShared>
      <con:property>customerNumber</con:property>
      <con:property>transferAmount</con:property>
      <con:property>statementDescription</con:property>
      <con:property>paymentOptions</con:property>
      <con:startRow>1</con:startRow>
      <con:endRow>1</con:endRow>
      <con:recordsPerIteration>1</con:recordsPerIteration>
      <con:completeLastOperation>true</con:completeLastOperation>
      <con:trimValues>false</con:trimValues>
      <con:entitizeValues>false</con:entitizeValues>
      <con:restartOnRun>true</con:restartOnRun>
      <con:expandProperties>false</con:expandProperties>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="ProductInfo" id="660edc58-8bdc-4de3-9feb-1cdb0bcd7b09">
    <con:settings/>
    <con:config service="https://onramp-int.int.capinet" resourcePath="/access-facility/productInfo" methodName="ProductInfo" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="ProductInfo" id="25faacab-7612-4435-99a3-007ff47aca74" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="sourceSystemIdentifier" value="USSD" xmlns="http://eviware.com/soapui/config"/></con:setting>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:endpoint>https://onramp-int.int.capinet/credit-services/creditproductservice-v1/credit-products/v1/access-facility</con:endpoint>
        <con:request>{\r
   "accountNumber" : "",\r
   "transferAmount" : ""\r
}</con:request>
        <con:originalUri>https://onramp-int.int.capinet/credit-services/creditproductservice-v1/credit-products/v1/access-facility/transfer</con:originalUri>
        <con:assertion type="JsonPath Existence Match" id="d66da373-023f-449b-9b61-b19efb12c2a6" name="Check for existence of [accountNumber]">
          <con:configuration>
            <path>$['accountNumber']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="d0be1a4b-0752-4283-bda3-0d44f9b5abf1" name="Check for existence of [approvedDate]">
          <con:configuration>
            <path>$['approvedDate']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="0bac3ac3-d10d-4de9-a097-ff9ed9dfef04" name="Check for existence of [availableLimit]">
          <con:configuration>
            <path>$['availableLimit']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="97955657-c446-4947-8a76-9dff6086aba5" name="Check for existence of [interestRateYearly]">
          <con:configuration>
            <path>$['interestRateYearly']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="2b469790-cc56-4d0e-8974-f02d9bf9cc47" name="Check for existence of [accountBalance]">
          <con:configuration>
            <path>$['accountBalance']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="17f0f37d-5a69-44c9-ad1c-8e809851ef11" name="Check for existence of [availableToTransfer]">
          <con:configuration>
            <path>$['availableToTransfer']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="b1695fd5-c56f-41b2-b68b-5077e9bce9ad" name="Check for existence of [remainingTerm]">
          <con:configuration>
            <path>$['remainingTerm']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="4307ab89-cf5a-4a71-b9a5-826e24002bc6" name="Check for existence of [nextInstalmentDue]">
          <con:configuration>
            <path>$['nextInstalmentDue']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="f253700a-0421-4e34-b412-0d4bb773b308" name="Check for existence of [nextInstalmentDate]">
          <con:configuration>
            <path>$['nextInstalmentDate']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="0751e283-a671-4474-a8a7-c2a646bd6631" name="Check for existence of [autoLimitIncrease]">
          <con:configuration>
            <path>$['autoLimitIncrease']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="383e0422-831b-482f-ba11-b24dc6c0bc56" name="Check for existence of [monthlyServiceFee]">
          <con:configuration>
            <path>$['monthlyServiceFee']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="737626d8-ec94-49ac-8340-621b714ba2fb" name="Check for existence of [minimumTerm]">
          <con:configuration>
            <path>$['minimumTerm']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="3284d06a-3ee9-49bc-8bf9-6771dc5f3fa8" name="Check for existence of [maximumTerm]">
          <con:configuration>
            <path>$['maximumTerm']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="ab1984d2-611f-4f8b-8b3f-4fc6dfd60e81" name="Check for existence of [minimumTransferAmount]">
          <con:configuration>
            <path>$['minimumTransferAmount']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="40715926-3258-4a50-9b54-d628c4877084" name="Check for existence of [maximumRepayment]">
          <con:configuration>
            <path>$['maximumRepayment']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="20ee2386-3fe6-4085-b00b-e7f1571bfbd4" name="Check for existence of [termBasis]">
          <con:configuration>
            <path>$['termBasis']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="cb110b71-60e9-46e8-be24-3e1b235f5e92" name="Check for existence of [lastArrearsDate]">
          <con:configuration>
            <path>$['lastArrearsDate']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="dee5ccc1-0129-4fec-80af-e3b707c222d3" name="Check for existence of [decemberArrears]">
          <con:configuration>
            <path>$['decemberArrears']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="88740023-2d4c-4d9a-9e32-860b4e88afdf" name="Check for existence of [totalArrearsPayable]">
          <con:configuration>
            <path>$['totalArrearsPayable']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="9e16e8a5-4c42-4a40-abd8-2c2160e133f0" name="Check for existence of [productInsurance]">
          <con:configuration>
            <path>$['productInsurance']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters>
          <con:entry key="Authorization" value="${TransferToken#result}"/>
          <con:entry key="customerNumber" value="${DataSource#customerNumber}"/>
        </con:parameters>
        <con:parameterOrder>
          <con:entry>customerNumber</con:entry>
          <con:entry>Authorization</con:entry>
        </con:parameterOrder>
        <con:environmentSpec>
          <con:entry environmentId="abe22d3f-c611-48a2-aa3a-bbb3916687f4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89bfff1c-d314-464e-8dc2-7c368a0011af">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="ProductInfoSinkData" id="98e583c5-83b2-41c1-a3ee-e67c374d85c5">
    <con:settings/>
    <con:config>
      <script>import com.eviware.soapui.support.JsonUtil

//Clear property values in datasink
data = context.testCase.getTestStepByName("ProductInfoSaveResponse");
String[] propToRemove = new String[data.getPropertyCount()];
propToRemove = data.getPropertyNames();
for ( int i = 0 ; i &lt; propToRemove.size(); i++ ){
    data.removeProperty( propToRemove[i] );
}

//accountNumber
def accountNumber = context.expand( '${ProductInfo#Response#$[\'accountNumber\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("accountNumber", accountNumber.toString()) 

//approvedDate
def approvedDate = context.expand( '${ProductInfo#Response#$[\'approvedDate\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("approvedDate", approvedDate.toString())

//availableLimit
def availableLimit = context.expand( '${ProductInfo#Response#$[\'availableLimit\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("availableLimit", availableLimit.toString())

//interestRateYearly
def interestRateYearly = context.expand( '${ProductInfo#Response#$[\'interestRateYearly\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("interestRateYearly", interestRateYearly.toString())

//accountBalance
def accountBalance = context.expand( '${ProductInfo#Response#$[\'accountBalance\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("accountBalance", accountBalance.toString())

//availableToTransfer
def availableToTransfer = context.expand( '${ProductInfo#Response#$[\'availableToTransfer\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("availableToTransfer", availableToTransfer.toString())

//remainingTerm
def remainingTerm = context.expand( '${ProductInfo#Response#$[\'remainingTerm\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("remainingTerm", remainingTerm.toString())

//nextInstalmentDue
def nextInstalmentDue = context.expand( '${ProductInfo#Response#$[\'nextInstalmentDue\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("nextInstalmentDue", nextInstalmentDue.toString())

//nextInstalmentDate
def nextInstalmentDate = context.expand( '${ProductInfo#Response#$[\'nextInstalmentDate\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("nextInstalmentDate", nextInstalmentDate.toString())

//autoLimitIncrease
def autoLimitIncrease = context.expand( '${ProductInfo#Response#$[\'autoLimitIncrease\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("autoLimitIncrease", autoLimitIncrease.toString())

//monthlyServiceFee
def monthlyServiceFee = context.expand( '${ProductInfo#Response#$[\'monthlyServiceFee\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("monthlyServiceFee", monthlyServiceFee.toString())

//minimumTerm
def minimumTerm = context.expand( '${ProductInfo#Response#$[\'minimumTerm\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("minimumTerm", minimumTerm.toString())

//maximumTerm
def maximumTerm = context.expand( '${ProductInfo#Response#$[\'maximumTerm\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("maximumTerm", maximumTerm.toString())

//maximumRepayment
def maximumRepayment = context.expand( '${ProductInfo#Response#$[\'maximumRepayment\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("maximumRepayment", maximumRepayment.toString())

//termBasis
def termBasis = context.expand( '${ProductInfo#Response#$[\'termBasis\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("termBasis", termBasis.toString())

//lastArrearsDate
def lastArrearsDate = context.expand( '${ProductInfo#Response#$[\'lastArrearsDate\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("lastArrearsDate", lastArrearsDate.toString())

//decemberArrears
def decemberArrears = context.expand( '${ProductInfo#Response#$[\'decemberArrears\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("decemberArrears", decemberArrears.toString())

//totalArrearsPayable
def totalArrearsPayable = context.expand( '${ProductInfo#Response#$[\'totalArrearsPayable\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("totalArrearsPayable", totalArrearsPayable.toString())

//productInsurance
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("productInsurance", "-".toString())

//insuranceExpiry
def insuranceExpiry = context.expand( '${ProductInfo#Response#$[\'productInsurance\'][\'insuranceExpiry\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("insuranceExpiry", insuranceExpiry.toString()) 

//insuranceDeathRate
def insuranceDeathRate = context.expand( '${ProductInfo#Response#$[\'productInsurance\'][\'insuranceDeathRate\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("insuranceDeathRate", insuranceDeathRate.toString()) 

//insuranceDisabilityRate
def insuranceDisabilityRate = context.expand( '${ProductInfo#Response#$[\'productInsurance\'][\'insuranceDisabilityRate\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("insuranceDisabilityRate", insuranceDisabilityRate.toString()) 

//insuranceRetrenchmentRate
def insuranceRetrenchmentRate = context.expand( '${ProductInfo#Response#$[\'productInsurance\'][\'insuranceRetrenchmentRate\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("insuranceRetrenchmentRate", insuranceRetrenchmentRate.toString()) 

//insuranceOption
def insuranceOption = context.expand( '${ProductInfo#Response#$[\'productInsurance\'][\'insuranceOption\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("insuranceOption", insuranceOption.toString())

//clientName
def clientName = context.expand( '${ProductInfo#Response#$[\'clientName\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("clientName", clientName.toString()) 

//fixedInitiationFee
def fixedInitiationFee = context.expand( '${ProductInfo#Response#$[\'fixedInitiationFee\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("fixedInitiationFee", fixedInitiationFee.toString()) 

//interestRateMargin
def interestRateMargin = context.expand( '${ProductInfo#Response#$[\'interestRateMargin\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("interestRateMargin", interestRateMargin.toString()) 

//maxInitiationFee
def maxInitiationFee = context.expand( '${ProductInfo#Response#$[\'maxInitiationFee\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("maxInitiationFee", maxInitiationFee.toString())

//interestRateType
def interestRateType = context.expand( '${ProductInfo#Response#$[\'interestRateType\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("interestRateType", interestRateType.toString()) 

//initiationFee1
def initiationFee1 = context.expand( '${ProductInfo#Response#$[\'initiationFee1\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("initiationFee1", initiationFee1.toString()) 

//initiationFee2
def initiationFee2 = context.expand( '${ProductInfo#Response#$[\'initiationFee2\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("initiationFee2", initiationFee2.toString()) 

//cummulativeTransferTotal
def cummulativeTransferTotal = context.expand( '${ProductInfo#Response#$[\'cummulativeTransferTotal\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("cummulativeTransferTotal", cummulativeTransferTotal.toString()) 

//nonUsageServiceFee
def nonUsageServiceFee = context.expand( '${ProductInfo#Response#$[\'nonUsageServiceFee\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("nonUsageServiceFee", nonUsageServiceFee.toString()) 

//initiationFeeBracketAmt
def initiationFeeBracketAmt = context.expand( '${ProductInfo#Response#$[\'initiationFeeBracketAmt\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("initiationFeeBracketAmt", initiationFeeBracketAmt.toString()) 

//riskCategory
def riskCategory = context.expand( '${ProductInfo#Response#$[\'riskCategory\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("riskCategory", riskCategory.toString()) 

//minimumTransferAmount
def minimumTransferAmount = context.expand( '${ProductInfo#Response#$[\'minimumTransferAmount\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("minimumTransferAmount", minimumTransferAmount.toString()) 

//contractedCapital
def contractedCapital = context.expand( '${ProductInfo#Response#$[\'contractedCapital\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("contractedCapital", contractedCapital.toString()) 

//contractedTerm
def contractedTerm = context.expand( '${ProductInfo#Response#$[\'contractedTerm\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("contractedTerm", contractedTerm.toString()) 

//contractCapitalDate
def contractCapitalDate = context.expand( '${ProductInfo#Response#$[\'contractCapitalDate\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("contractCapitalDate", contractCapitalDate.toString()) 

//collectionDate
def collectionDate = context.expand( '${ProductInfo#Response#$[\'collectionDate\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("collectionDate", collectionDate.toString()) 

//contractedRepayment
def contractedRepayment = context.expand( '${ProductInfo#Response#$[\'contractedRepayment\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("contractedRepayment", contractedRepayment.toString()) 

//suspensiveCondition
def suspensiveCondition = context.expand( '${ProductInfo#Response#$[\'suspensiveCondition\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("suspensiveCondition", suspensiveCondition.toString()) 
if(suspensiveCondition.equals("Y")) {
	log.info "Fail: Client has a suspensive condition."
	testRunner.fail(testRunner.testCase.name + " Failed: Client has a suspensive condition.")
}

//ccsStatus
def ccsStatus = context.expand( '${ProductInfo#Response#$[\'ccsStatus\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("ccsStatus", ccsStatus.toString()) 

//deActiveDate
def deActiveDate = context.expand( '${ProductInfo#Response#$[\'deActiveDate\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("deActiveDate", deActiveDate.toString()) 

//suspensiveDate
def suspensiveDate = context.expand( '${ProductInfo#Response#$[\'suspensiveDate\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("suspensiveDate", suspensiveDate.toString()) 

//loanStop
def loanStop = context.expand( '${ProductInfo#Response#$[\'loanStop\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("loanStop", loanStop.toString()) 

//clientUnderAdminstration
def clientUnderAdminstration = context.expand( '${ProductInfo#Response#$[\'clientUnderAdminstration\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("clientUnderAdminstration", clientUnderAdminstration.toString()) 

//afInArrears
def afInArrears = context.expand( '${ProductInfo#Response#$[\'afInArrears\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("afInArrears", afInArrears.toString()) 

//unEmployed
def unEmployed = context.expand( '${ProductInfo#Response#$[\'unEmployed\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("unEmployed", unEmployed.toString()) 

//debtRestructuring
def debtRestructuring = context.expand( '${ProductInfo#Response#$[\'debtRestructuring\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("debtRestructuring", debtRestructuring.toString()) 

//otherAccountInArrears
def otherAccountInArrears = context.expand( '${ProductInfo#Response#$[\'otherAccountInArrears\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("otherAccountInArrears", otherAccountInArrears.toString())</script>
    </con:config>
  </con:testStep>
  <con:testStep type="datasink" name="ProductInfoSaveResponse" id="922a5f70-be25-434a-92ce-2064c96b5a26">
    <con:settings/>
    <con:config xsi:type="con:DataSinkStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dataSink type="Excel">
        <con:configuration>
          <file/>
          <outfile>O:/UAT/Test Automation/CVS New Credit Products/Credit Product Service/CloseAF/1.ProductInfoResults.xlsx</outfile>
          <worksheet>Sheet1</worksheet>
          <cell>E4</cell>
          <evaluateFormulas>false</evaluateFormulas>
          <append>false</append>
        </con:configuration>
      </con:dataSink>
      <con:shared>false</con:shared>
      <con:properties>
        <con:property>
          <con:name>accountNumber</con:name>
          <con:value>1688735508</con:value>
        </con:property>
        <con:property>
          <con:name>approvedDate</con:name>
          <con:value>2020-01-27</con:value>
        </con:property>
        <con:property>
          <con:name>availableLimit</con:name>
          <con:value>200000.0</con:value>
        </con:property>
        <con:property>
          <con:name>interestRateYearly</con:name>
          <con:value>18.0</con:value>
        </con:property>
        <con:property>
          <con:name>accountBalance</con:name>
          <con:value>128039.68</con:value>
        </con:property>
        <con:property>
          <con:name>availableToTransfer</con:name>
          <con:value>71960.32</con:value>
        </con:property>
        <con:property>
          <con:name>remainingTerm</con:name>
          <con:value>47</con:value>
        </con:property>
        <con:property>
          <con:name>nextInstalmentDue</con:name>
          <con:value>4343.63</con:value>
        </con:property>
        <con:property>
          <con:name>nextInstalmentDate</con:name>
          <con:value>2020-03-13</con:value>
        </con:property>
        <con:property>
          <con:name>autoLimitIncrease</con:name>
          <con:value>N</con:value>
        </con:property>
        <con:property>
          <con:name>monthlyServiceFee</con:name>
          <con:value>69.0</con:value>
        </con:property>
        <con:property>
          <con:name>minimumTerm</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>maximumTerm</con:name>
          <con:value>48</con:value>
        </con:property>
        <con:property>
          <con:name>maximumRepayment</con:name>
          <con:value>6004.54</con:value>
        </con:property>
        <con:property>
          <con:name>termBasis</con:name>
          <con:value>MONTHLY</con:value>
        </con:property>
        <con:property>
          <con:name>lastArrearsDate</con:name>
          <con:value>9999-12-31</con:value>
        </con:property>
        <con:property>
          <con:name>decemberArrears</con:name>
          <con:value>0.0</con:value>
        </con:property>
        <con:property>
          <con:name>totalArrearsPayable</con:name>
          <con:value>343.63</con:value>
        </con:property>
        <con:property>
          <con:name>productInsurance</con:name>
          <con:value>-</con:value>
        </con:property>
        <con:property>
          <con:name>insuranceExpiry</con:name>
          <con:value>0001-01-01</con:value>
        </con:property>
        <con:property>
          <con:name>insuranceDeathRate</con:name>
          <con:value>0.0</con:value>
        </con:property>
        <con:property>
          <con:name>insuranceDisabilityRate</con:name>
          <con:value>0.0</con:value>
        </con:property>
        <con:property>
          <con:name>insuranceRetrenchmentRate</con:name>
          <con:value>0.0</con:value>
        </con:property>
        <con:property>
          <con:name>insuranceOption</con:name>
          <con:value>NONE</con:value>
        </con:property>
        <con:property>
          <con:name>clientName</con:name>
          <con:value>MISS BARBARA TABATA                             B</con:value>
        </con:property>
        <con:property>
          <con:name>fixedInitiationFee</con:name>
          <con:value>250.0</con:value>
        </con:property>
        <con:property>
          <con:name>interestRateMargin</con:name>
          <con:value>3.0</con:value>
        </con:property>
        <con:property>
          <con:name>maxInitiationFee</con:name>
          <con:value>1207.0</con:value>
        </con:property>
        <con:property>
          <con:name>interestRateType</con:name>
          <con:value>F</con:value>
        </con:property>
        <con:property>
          <con:name>initiationFee1</con:name>
          <con:value>0.0</con:value>
        </con:property>
        <con:property>
          <con:name>initiationFee2</con:name>
          <con:value>0.0</con:value>
        </con:property>
        <con:property>
          <con:name>cummulativeTransferTotal</con:name>
          <con:value>216000.0</con:value>
        </con:property>
        <con:property>
          <con:name>nonUsageServiceFee</con:name>
          <con:value>0.0</con:value>
        </con:property>
        <con:property>
          <con:name>initiationFeeBracketAmt</con:name>
          <con:value>0.0</con:value>
        </con:property>
        <con:property>
          <con:name>riskCategory</con:name>
          <con:value>XXX</con:value>
        </con:property>
        <con:property>
          <con:name>minimumTransferAmount</con:name>
          <con:value>4000.0</con:value>
        </con:property>
        <con:property>
          <con:name>contractedCapital</con:name>
          <con:value>147917.0</con:value>
        </con:property>
        <con:property>
          <con:name>contractedTerm</con:name>
          <con:value>47</con:value>
        </con:property>
        <con:property>
          <con:name>contractCapitalDate</con:name>
          <con:value>2020-02-19</con:value>
        </con:property>
        <con:property>
          <con:name>collectionDate</con:name>
          <con:value>2020-04-15</con:value>
        </con:property>
        <con:property>
          <con:name>contractedRepayment</con:name>
          <con:value>3907.32</con:value>
        </con:property>
        <con:property>
          <con:name>suspensiveCondition</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>ccsStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>deActiveDate</con:name>
          <con:value>0001-01-01</con:value>
        </con:property>
        <con:property>
          <con:name>suspensiveDate</con:name>
          <con:value>0001-01-01</con:value>
        </con:property>
        <con:property>
          <con:name>loanStop</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>clientUnderAdminstration</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>afInArrears</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>unEmployed</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>debtRestructuring</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>otherAccountInArrears</con:name>
          <con:value/>
        </con:property>
      </con:properties>
    </con:config>
  </con:testStep>
  <con:properties>
    <con:property>
      <con:name>JSONMessageProperty</con:name>
      <con:value>{"fromAccount": "1110040871","toAccount": "1688735354","transferAmount": "169901.81" }</con:value>
    </con:property>
    <con:property>
      <con:name>URLEncoded</con:name>
      <con:value>grant_type=password&amp;username=CP343094&amp;password=Vadyca!77</con:value>
    </con:property>
  </con:properties>
  <con:reportParameters/>
  <con:breakPoints>
    <con:testStepId>56e89502-1c62-469d-a283-4f83298621cb</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>89ad6639-1f6e-4e45-ab46-d924398bd069</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>33308e69-b4ca-4a6d-bcd7-74a8d402e9fa</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>9f4a9659-7e4e-4fe0-a7d0-5e2edfae9487</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>19975a80-74e5-4009-9826-4f8d738926e1</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>0a59a3d4-6b99-4408-9037-aa43ccf97710</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>c850625b-67c0-4e6e-8dc4-662575596654</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>4ac1971a-d702-4bbe-8bd4-929ceb5759ad</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>8abf75f3-3552-4b89-94a4-d860847243ba</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>98e8dce1-8880-4d11-853e-245afe9b92c3</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>50a793df-aa0b-4274-a531-0532bf5048d1</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>dec66e51-0ad6-48aa-b3c2-a9a6db27163c</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>a218e741-964f-4ae9-adf9-923286f617c9</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>1e7a9a56-349a-401e-83a6-573d4effc23e</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>8a4faa10-a600-4a1c-9bb8-63a65e13dc20</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>b98b543c-aa9f-4a9b-8ee7-775ac8c94999</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
</con:testCase>
