<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="d7f184a1-3645-43ae-a65e-05dafea8e965" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="Suspensive Condition" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" zephyrTestName="" zephyrTestId="" maxResults="0" disabled="true" xmlns:con="http://eviware.com/soapui/config">
  <con:description>Test Case Name:


Description:


Expected Result:</con:description>
  <con:settings>
    <con:setting id="d7f184a1-3645-43ae-a65e-05dafea8e965fileName">Suspensive-Condition</con:setting>
  </con:settings>
  <con:savedRecentRuns>1</con:savedRecentRuns>
  <con:testStep type="datasource" name="UsernamePasswordDataSource" id="a948067b-b368-4668-9e7c-9f0c82f549f6">
    <con:settings/>
    <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dataSource type="Excel">
        <con:configuration>
          <file>C:/Temp/UsernamePassword.xlsx</file>
          <worksheet>Sheet1</worksheet>
          <cell>A2</cell>
          <ignoreEmpty>false</ignoreEmpty>
          <evaluateFormulas>false</evaluateFormulas>
        </con:configuration>
      </con:dataSource>
      <con:shared>false</con:shared>
      <con:restartShared>true</con:restartShared>
      <con:property>grant_type</con:property>
      <con:property>username</con:property>
      <con:property>password</con:property>
      <con:startRow/>
      <con:endRow/>
      <con:recordsPerIteration>1</con:recordsPerIteration>
      <con:completeLastOperation>true</con:completeLastOperation>
      <con:failOnEmpty>true</con:failOnEmpty>
      <con:trimValues>true</con:trimValues>
      <con:entitizeValues>false</con:entitizeValues>
      <con:restartOnRun>true</con:restartOnRun>
      <con:expandProperties>false</con:expandProperties>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="UsernamePassword" id="71c3cf89-51a8-45eb-a5d0-14c3b57bc92f">
    <con:settings/>
    <con:config>
      <script>//Get URL Encoded
def grant_type = context.expand( '${UsernamePasswordDataSource#grant_type}' )
def username = context.expand( '${UsernamePasswordDataSource#username}' )
def password = context.expand( '${UsernamePasswordDataSource#password}' )

//Build URLEncoded
//grant_type=password&amp;username=CP343094&amp;password=Vadyca!22
def URLEncoded = ('grant_type='+grant_type+'&amp;username='+username+'&amp;password='+password)
log.info(URLEncoded)
//Create variable 
testRunner.testCase.setPropertyValue( "URLEncoded", URLEncoded )</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="Token" id="1c27c1ac-1eaf-4e3d-aa8d-686dceb61b36">
    <con:settings/>
    <con:config service="AccessToken" resourcePath="/token" methodName="Token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="Token" id="3fff67e7-5a37-44b8-8893-cbce56d10cf0" mediaType="Form URL Encoded" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/x-www-form-urlencoded" xmlns="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>https://idp-non-prod.int.capinet/auth/realms/DEV/protocol/openid-connect</con:endpoint>
        <con:request>${#TestCase#URLEncoded}</con:request>
        <con:originalUri>https://idp-non-prod.int.capinet/auth/realms/DEV/protocol/openid-connect/token</con:originalUri>
        <con:assertion type="JsonPath Existence Match" id="bc731ccc-e45b-4121-969b-7b4dde6be7e9" name="Check for existence of [access_token]">
          <con:configuration>
            <path>$['access_token']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:username>Platform-DEV</con:username>
          <con:password>5d2448d6-205a-489a-937e-fa2479521bfd</con:password>
          <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
          <con:preemptive>true</con:preemptive>
          <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
          <con:authType>Preemptive</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
        <con:parameterOrder/>
        <con:environmentSpec>
          <con:entry environmentId="d762859b-28b7-4b5a-be3e-b89bb67042dc">
            <con:authProfile>Basic</con:authProfile>
            <con:username>Platform-DEV</con:username>
            <con:password>5d2448d6-205a-489a-937e-fa2479521bfd</con:password>
            <con:preemptive>true</con:preemptive>
          </con:entry>
          <con:entry environmentId="c6d10c3f-13fd-496d-a352-d5e1b3ffb3e4">
            <con:authProfile>Basic</con:authProfile>
            <con:username>Platform-INT</con:username>
            <con:password>3a6198ea-eed5-43b2-bee2-a5a4895096ec</con:password>
            <con:preemptive>true</con:preemptive>
          </con:entry>
          <con:entry environmentId="abe22d3f-c611-48a2-aa3a-bbb3916687f4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89bfff1c-d314-464e-8dc2-7c368a0011af">
            <con:authProfile>Basic</con:authProfile>
            <con:username>Platform-QA</con:username>
            <con:password/>
            <con:preemptive>true</con:preemptive>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="TransferToken" id="4805854a-087d-4833-809f-bad9a9927e4c">
    <con:settings/>
    <con:config>
      <script>//Get token value
def token = context.expand( '${Token#Response#$[\'access_token\']}' )
return 'Bearer ' + token</script>
    </con:config>
  </con:testStep>
  <con:testStep type="datasource" name="DataSource" id="9330a2ab-4f26-409b-934d-fcdceabaedb7">
    <con:settings/>
    <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dataSource type="Excel">
        <con:configuration>
          <file>C:/Temp/ProductInfo.xlsx</file>
          <worksheet>Sheet1</worksheet>
          <cell>E2</cell>
          <ignoreEmpty>false</ignoreEmpty>
          <evaluateFormulas>false</evaluateFormulas>
        </con:configuration>
      </con:dataSource>
      <con:shared>false</con:shared>
      <con:restartShared>true</con:restartShared>
      <con:property>customerNumber</con:property>
      <con:property>transferAmount</con:property>
      <con:property>statementDescription</con:property>
      <con:startRow/>
      <con:endRow/>
      <con:recordsPerIteration>1</con:recordsPerIteration>
      <con:completeLastOperation>true</con:completeLastOperation>
      <con:failOnEmpty>true</con:failOnEmpty>
      <con:trimValues>true</con:trimValues>
      <con:entitizeValues>false</con:entitizeValues>
      <con:restartOnRun>true</con:restartOnRun>
      <con:expandProperties>false</con:expandProperties>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="ProductInfo" id="d59adf68-9821-411c-ad1d-4b42fd1e539c">
    <con:settings/>
    <con:config service="Access Facility" resourcePath="/access-facility/productInfo" methodName="ProductInfo" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="ProductInfo" id="25faacab-7612-4435-99a3-007ff47aca74" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="sourceSystemIdentifier" value="USSD" xmlns="http://eviware.com/soapui/config"/></con:setting>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:endpoint>https://onramp-int.int.capinet/credit-services/creditproductservice-v1/credit-products/v1/access-facility</con:endpoint>
        <con:request>{\r
   "accountNumber" : "",\r
   "transferAmount" : ""\r
}</con:request>
        <con:originalUri>https://onramp-int.int.capinet/credit-services/creditproductservice-v1/credit-products/v1/access-facility/transfer</con:originalUri>
        <con:assertion type="JsonPath Existence Match" id="d66da373-023f-449b-9b61-b19efb12c2a6" name="Check for existence of [accountNumber]">
          <con:configuration>
            <path>$['accountNumber']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="d0be1a4b-0752-4283-bda3-0d44f9b5abf1" name="Check for existence of [approvedDate]">
          <con:configuration>
            <path>$['approvedDate']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="0bac3ac3-d10d-4de9-a097-ff9ed9dfef04" name="Check for existence of [availableLimit]">
          <con:configuration>
            <path>$['availableLimit']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="97955657-c446-4947-8a76-9dff6086aba5" name="Check for existence of [interestRateYearly]">
          <con:configuration>
            <path>$['interestRateYearly']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="2b469790-cc56-4d0e-8974-f02d9bf9cc47" name="Check for existence of [accountBalance]">
          <con:configuration>
            <path>$['accountBalance']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="17f0f37d-5a69-44c9-ad1c-8e809851ef11" name="Check for existence of [availableToTransfer]">
          <con:configuration>
            <path>$['availableToTransfer']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="b1695fd5-c56f-41b2-b68b-5077e9bce9ad" name="Check for existence of [remainingTerm]">
          <con:configuration>
            <path>$['remainingTerm']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="4307ab89-cf5a-4a71-b9a5-826e24002bc6" name="Check for existence of [nextInstalmentDue]">
          <con:configuration>
            <path>$['nextInstalmentDue']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="f253700a-0421-4e34-b412-0d4bb773b308" name="Check for existence of [nextInstalmentDate]">
          <con:configuration>
            <path>$['nextInstalmentDate']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="0751e283-a671-4474-a8a7-c2a646bd6631" name="Check for existence of [autoLimitIncrease]">
          <con:configuration>
            <path>$['autoLimitIncrease']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="383e0422-831b-482f-ba11-b24dc6c0bc56" name="Check for existence of [monthlyServiceFee]">
          <con:configuration>
            <path>$['monthlyServiceFee']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="737626d8-ec94-49ac-8340-621b714ba2fb" name="Check for existence of [minimumTerm]">
          <con:configuration>
            <path>$['minimumTerm']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="3284d06a-3ee9-49bc-8bf9-6771dc5f3fa8" name="Check for existence of [maximumTerm]">
          <con:configuration>
            <path>$['maximumTerm']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="ab1984d2-611f-4f8b-8b3f-4fc6dfd60e81" name="Check for existence of [minimumTransferAmount]">
          <con:configuration>
            <path>$['minimumTransferAmount']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="40715926-3258-4a50-9b54-d628c4877084" name="Check for existence of [maximumRepayment]">
          <con:configuration>
            <path>$['maximumRepayment']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="20ee2386-3fe6-4085-b00b-e7f1571bfbd4" name="Check for existence of [termBasis]">
          <con:configuration>
            <path>$['termBasis']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="cb110b71-60e9-46e8-be24-3e1b235f5e92" name="Check for existence of [lastArrearsDate]">
          <con:configuration>
            <path>$['lastArrearsDate']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="dee5ccc1-0129-4fec-80af-e3b707c222d3" name="Check for existence of [decemberArrears]">
          <con:configuration>
            <path>$['decemberArrears']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="88740023-2d4c-4d9a-9e32-860b4e88afdf" name="Check for existence of [totalArrearsPayable]">
          <con:configuration>
            <path>$['totalArrearsPayable']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="9e16e8a5-4c42-4a40-abd8-2c2160e133f0" name="Check for existence of [productInsurance]">
          <con:configuration>
            <path>$['productInsurance']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters>
          <con:entry key="Authorization" value="${TransferToken#result}"/>
          <con:entry key="customerNumber" value="${DataSource#customerNumber}"/>
        </con:parameters>
        <con:parameterOrder>
          <con:entry>customerNumber</con:entry>
          <con:entry>Authorization</con:entry>
        </con:parameterOrder>
        <con:environmentSpec>
          <con:entry environmentId="abe22d3f-c611-48a2-aa3a-bbb3916687f4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89bfff1c-d314-464e-8dc2-7c368a0011af">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Repayment(Transfer)Data" id="d18d415c-d5a6-4972-aaf2-6deb294cc364">
    <con:settings/>
    <con:config>
      <script>//Get data values
def accountNumber = context.expand( '${ProductInfo#Response#$[\'accountNumber\']}' )
def transferAmount = context.expand( '${DataSource#transferAmount}' )

//Build JSON message
def jsonMessage = '{"accountNumber": "'+accountNumber+'","transferAmount": "'+transferAmount+'" }'
log.info(jsonMessage)
//Create variable 
testRunner.testCase.setPropertyValue( "JSONMessageProperty", jsonMessage )</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="Repayment(Transfer)" id="897a2210-245b-45bb-abf5-93883f902073">
    <con:settings/>
    <con:config service="Access Facility" resourcePath="/access-facility/repayment" methodName="Repayment" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="Repayment(Transfer)" id="25faacab-7612-4435-99a3-007ff47aca74" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${TransferToken#result}"/>
  &lt;con:entry key="sourceSystemIdentifier" value="USSD"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
        <con:endpoint>https://onramp-int.int.capinet/credit-services/creditproductservice-v1/credit-products/v1/access-facility</con:endpoint>
        <con:request>${#TestCase#JSONMessageProperty}</con:request>
        <con:originalUri>https://onramp-int.int.capinet/credit-services/creditproductservice-v1/credit-products/v1/access-facility/transfer</con:originalUri>
        <con:assertion type="JsonPath Existence Match" id="d832459b-fbf9-4cc4-bafd-00127738b191" name="Check for existence of [accountNumber]">
          <con:configuration>
            <path>$['accountNumber']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="b3533f94-41fb-4545-9e86-055aea131e1d" name="Check for existence of [transferAmount]">
          <con:configuration>
            <path>$['transferAmount']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="4d34f3ea-cbec-4da7-ae5d-477dc5116a76" name="Check for existence of [outstandingBalance]">
          <con:configuration>
            <path>$['outstandingBalance']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="c7753272-94dc-403a-838d-7f090aeeb0c7" name="Check for existence of [repaymentOptions]">
          <con:configuration>
            <path>$['repaymentOptions']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters>
          <entry key="operationId" value="transfer" xmlns="http://eviware.com/soapui/config"/>
        </con:parameters>
        <con:parameterOrder>
          <con:entry>operationId</con:entry>
        </con:parameterOrder>
        <con:environmentSpec>
          <con:entry environmentId="abe22d3f-c611-48a2-aa3a-bbb3916687f4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89bfff1c-d314-464e-8dc2-7c368a0011af">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="PaymentPlanData" id="198a0129-10ec-4129-b8ef-7ef084c7283b">
    <con:settings/>
    <con:config>
      <script>//Get data values
def accountNumber = context.expand( '${Repayment(Transfer)#Response#$[\'accountNumber\']}' )
def transferAmount = context.expand( '${DataSource#transferAmount}' )
def noOfInstalment = context.expand( '${Repayment(Transfer)#Response#$[\'repaymentOptions\'][0][\'numberOfInstalment\']}' )
def instalmentAmount = context.expand( '${Repayment(Transfer)#Response#$[\'repaymentOptions\'][0][\'instalmentAmount\']}' )

//Build JSON message
def jsonMessage = '{"accountNumber": "'+accountNumber+'","transferAmount": "'+transferAmount+'","noOfInstalment": "'+noOfInstalment+'","instalmentAmount": "'+instalmentAmount+'" }'

log.info(jsonMessage)
//Create variable 
testRunner.testCase.setPropertyValue( "JSONMessageProperty", jsonMessage )</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="PaymentPlan" id="5fb6aa4e-dbd0-45e1-8d3e-329c7fa09580">
    <con:settings/>
    <con:config service="Access Facility" resourcePath="/access-facility/transfer/paymentplan" methodName="PaymentPlan" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="PaymentPlan" id="25faacab-7612-4435-99a3-007ff47aca74" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${TransferToken#result}"/>
  &lt;con:entry key="sourceSystemIdentifier" value="USSD"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
        <con:endpoint>https://onramp-int.int.capinet/credit-services/creditproductservice-v1/credit-products/v1/access-facility</con:endpoint>
        <con:request>${#TestCase#JSONMessageProperty}</con:request>
        <con:originalUri>https://onramp-int.int.capinet/credit-services/creditproductservice-v1/credit-products/v1/access-facility/transfer</con:originalUri>
        <con:assertion type="JsonPath Existence Match" id="1e3717bf-617c-4d33-b188-fc1c5e67b54e" name="Check for existence of [accountNumber]">
          <con:configuration>
            <path>$['accountNumber']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="941006bc-c01c-4d12-b588-8d0a3f4245b1" name="Check for existence of [transferAmount]">
          <con:configuration>
            <path>$['transferAmount']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="4a9fbbb4-baa3-45d4-9263-1a0d81087265" name="Check for existence of [deathRate]">
          <con:configuration>
            <path>$['deathRate']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="3eafcca9-3a74-4cb3-b1da-69976ab434fc" name="Check for existence of [retrenchRate]">
          <con:configuration>
            <path>$['retrenchRate']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="23bf4577-cbbb-453f-b096-e22a80cb1e39" name="Check for existence of [disabilityRate]">
          <con:configuration>
            <path>$['disabilityRate']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="cc3a6dd8-9e7a-46ca-8efb-318acadbb1cb" name="Check for existence of [monthlyServiceFee]">
          <con:configuration>
            <path>$['monthlyServiceFee']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="258c9c2b-68d9-4bd8-945b-ebe58c9a6ebc" name="Check for existence of [initiationFee]">
          <con:configuration>
            <path>$['initiationFee']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="0151e905-671d-4155-8a59-d0fd70f6beb9" name="Check for existence of [totalCostOfCredit]">
          <con:configuration>
            <path>$['totalCostOfCredit']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="29db97bc-da7c-46bf-9b62-ea845efe1916" name="Check for existence of [interestPayable]">
          <con:configuration>
            <path>$['interestPayable']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="a82a9525-e52d-4eab-8474-ac1a0b9b3e2b" name="Check for existence of [outstandingBalance]">
          <con:configuration>
            <path>$['outstandingBalance']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="232d78ed-aa4b-4e55-bb05-c8ad54bfd5aa" name="Check for existence of [newPaymentPlan]">
          <con:configuration>
            <path>$['newPaymentPlan']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters/>
        <con:environmentSpec>
          <con:entry environmentId="abe22d3f-c611-48a2-aa3a-bbb3916687f4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89bfff1c-d314-464e-8dc2-7c368a0011af">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="Operations(Transfer)" id="2c329aef-3cf2-4861-bc55-329c1adc28de">
    <con:settings/>
    <con:config service="Access Facility" resourcePath="/access-facility/operations" methodName="Operations" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="Operations(Transfer)" id="4da46116-2d86-4ebf-9368-58f74d8456fd" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${TransferToken#result}"/>
  &lt;con:entry key="sourceSystemIdentifier" value="USSD"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
        <con:endpoint>https://onramp-int.int.capinet/credit-services/creditproductservice-v1/credit-products/v1/access-facility</con:endpoint>
        <con:request>{\r
   "accountNumber" : "",\r
   "transferAmount" : ""\r
}</con:request>
        <con:originalUri>https://onramp-int.int.capinet/credit-services/creditproductservice-v1/credit-products/v1/access-facility/transfer</con:originalUri>
        <con:assertion type="JsonPath Existence Match" id="d69098ec-8b92-43ce-a428-e44332a32664" name="Check for existence of [loanBalance]">
          <con:configuration>
            <path>$['loanBalance']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="fc03a275-5768-4ebe-bf82-45aec7cb1256" name="Check for existence of [originalLimit]">
          <con:configuration>
            <path>$['originalLimit']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="d9b196bd-eae4-4059-a588-83cb8f6f1c68" name="Check for existence of [currentInstalmentDue]">
          <con:configuration>
            <path>$['currentInstalmentDue']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="b05264b4-9b2c-4ce0-ad9d-e5151d59a41f" name="Check for existence of [currentInstalmentDate]">
          <con:configuration>
            <path>$['currentInstalmentDate']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="8415f4d5-c9e5-43e3-9aba-924c15d55297" name="Check for existence of [currentNoOfInstalment]">
          <con:configuration>
            <path>$['currentNoOfInstalment']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="b80121fb-7712-4386-9afc-0a3d3d08a431" name="Check for existence of [followingInstalmentDue]">
          <con:configuration>
            <path>$['followingInstalmentDue']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="eaab4e05-7159-476f-b854-dea4dc41209f" name="Check for existence of [followingInstalmentDate]">
          <con:configuration>
            <path>$['followingInstalmentDate']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="48911d9b-4d80-4953-b700-a5391c3d59d2" name="Check for existence of [followingNoOfInstalment]">
          <con:configuration>
            <path>$['followingNoOfInstalment']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="04f0d4e8-5b93-479e-ae71-03c83d51ec72" name="Check for existence of [availableMinAmount]">
          <con:configuration>
            <path>$['availableMinAmount']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="2c22d68d-0c18-4b64-b62c-cb37103be64e" name="Check for existence of [availableMinTerm]">
          <con:configuration>
            <path>$['availableMinTerm']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="91ec7dde-4ddf-48ba-b0ab-dade466d6ab0" name="Check for existence of [availableMaxAmount]">
          <con:configuration>
            <path>$['availableMaxAmount']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="cbe8e121-b492-4bfe-ad35-e0d505f757d9" name="Check for existence of [availableMaxTerm]">
          <con:configuration>
            <path>$['availableMaxTerm']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="c647bbd7-089d-489c-82cb-4688295d2ba2" name="Check for existence of [operatableAccount]">
          <con:configuration>
            <path>$['operatableAccount']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters>
          <con:entry key="operationIdentifier" value="transfer"/>
          <con:entry key="accountNumber" value="${PaymentPlan#Response#$['accountNumber']}"/>
        </con:parameters>
        <con:parameterOrder>
          <con:entry>accountNumber</con:entry>
          <con:entry>operationIdentifier</con:entry>
        </con:parameterOrder>
        <con:environmentSpec>
          <con:entry environmentId="abe22d3f-c611-48a2-aa3a-bbb3916687f4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89bfff1c-d314-464e-8dc2-7c368a0011af">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="SinkDataFromAccountBefore" id="f68d2ed7-83ef-4e64-8ca9-82e5ad083522">
    <con:settings/>
    <con:config>
      <script>import com.eviware.soapui.support.JsonUtil

//fromAccount
def fromAccount = context.expand( '${PaymentPlan#Response#$[\'accountNumber\']}' )
//Remove last character from accountNumber string
def accessFacility = fromAccount.substring(0, fromAccount.length() - 1)</script>
    </con:config>
  </con:testStep>
  <con:testStep type="datasource" name="ConnectionString" id="4f9f98d8-76af-4cb1-9cc8-dc61306ce8f8">
    <con:settings>
      <con:setting id="com.eviware.soapui.impl.wsdl.teststeps.datasource.DataSourceContainer@prepared-properties">&lt;xml-fragment/></con:setting>
    </con:settings>
    <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dataSource type="Excel">
        <con:configuration>
          <file>C:/Temp/JDBCConnectionString.xlsx</file>
          <worksheet/>
          <cell>A2</cell>
          <ignoreEmpty>false</ignoreEmpty>
          <evaluateFormulas>false</evaluateFormulas>
        </con:configuration>
      </con:dataSource>
      <con:shared>true</con:shared>
      <con:restartShared>true</con:restartShared>
      <con:property>ConnectionString</con:property>
      <con:completeLastOperation>true</con:completeLastOperation>
      <con:restartOnRun>true</con:restartOnRun>
    </con:config>
  </con:testStep>
  <con:testStep type="jdbc" name="SQLQueryBefore" id="001771fa-df55-4d81-9631-f32298fe8beb">
    <con:settings>
      <con:setting id="prettyPrintResponse">true</con:setting>
    </con:settings>
    <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:driver>com.microsoft.sqlserver.jdbc.SQLServerDriver</con:driver>
      <con:connectionString>${ConnectionString#ConnectionString}</con:connectionString>
      <con:connectionProperties/>
      <con:query>SELECT TOP 100
DBO.GETCIFWITHCHECKDIGIT(RIGHT(A.CUSTOMER_NO,8)) AS 'CUSTOMER',
DBO.GETACCOUNTWITHCHECKDIGIT(RIGHT(A.KEY_1,9))   AS 'AF ACCT',
A.LOAN_BAL                                       AS 'AF BAL',
A.THEO_LOAN_BAL                                  AS 'AF THEO BAL',
DBO.GETACCOUNTWITHCHECKDIGIT(RIGHT(B.KEY_1,9))   AS 'SAV ACCT',
B.CURR_BAL                                       AS 'SAV BAL',
DBO.GETACCOUNTWITHCHECKDIGIT(RIGHT(CC.KEY_1,9))  AS 'CC ACCT',
CC.CURR_BAL AS 'CC BAL',
D.INIT_FEE_AMT_1                           AS 'INIT FEE'
FROM BORM A (NOLOCK)
JOIN INVM B (NOLOCK) ON A.CUSTOMER_NO = B.CUSTOMER_NO AND ACCT_TYPE = 0X30333030 AND CURR_STATUS = 0X3030
LEFT JOIN INVM CC (NOLOCK) ON A.CUSTOMER_NO = CC.CUSTOMER_NO AND CC.ACCT_TYPE = 0X30313031 AND CC.CURR_STATUS = 0X3030
LEFT JOIN BORN D (NOLOCK) ON D.KEY_1 = A.KEY_1
WHERE A.ACT_TYPE = 0X36303030 -- ACCESS FACILITY ACCOUNT TYPE 6000
AND STAT = 0X3038 --08 OPEN STATUS 
AND RIGHT(A.KEY_1,9) = :fromAccount
AND A.KEY_1 > 0X30303330303030303030313635383037343639 
--AND (A.LOAN_BAL > 0 AND A.THEO_LOAN_BAL > 0 )</con:query>
      <con:assertion type="XPath Match" id="28ceb49b-0e30-4155-910b-9f606a8840cb" name="Check for existence of [CUSTOMER]">
        <con:configuration>
          <path>exists( //Results/ResultSet/Row/CUSTOMER)</path>
          <content>true</content>
          <allowWildcards>false</allowWildcards>
          <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
          <ignoreComments>false</ignoreComments>
        </con:configuration>
      </con:assertion>
      <con:assertion type="XPath Match" id="924946fc-7a8d-4af7-b099-cfa3c7d5de31" name="Check for existence of [AFACCT]">
        <con:configuration>
          <path>exists( //Results/ResultSet/Row/AFACCT)</path>
          <content>true</content>
          <allowWildcards>false</allowWildcards>
          <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
          <ignoreComments>false</ignoreComments>
        </con:configuration>
      </con:assertion>
      <con:assertion type="XPath Match" id="d15e2d5c-5e42-4bf6-87a1-779d0d5cc7c5" name="Check for existence of [AFBAL]">
        <con:configuration>
          <path>exists( //Results/ResultSet/Row/AFBAL)</path>
          <content>true</content>
          <allowWildcards>false</allowWildcards>
          <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
          <ignoreComments>false</ignoreComments>
        </con:configuration>
      </con:assertion>
      <con:assertion type="XPath Match" id="d9f12dca-3f23-420c-a616-7653b580351b" name="Check for existence of [AFTHEOBAL]">
        <con:configuration>
          <path>exists( //Results/ResultSet/Row/AFTHEOBAL)</path>
          <content>true</content>
          <allowWildcards>false</allowWildcards>
          <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
          <ignoreComments>false</ignoreComments>
        </con:configuration>
      </con:assertion>
      <con:assertion type="XPath Match" id="e5bb8405-f3c0-4d6b-97f0-4d6569978496" name="Check for existence of [SAVACCT]">
        <con:configuration>
          <path>exists( //Results/ResultSet/Row/SAVACCT)</path>
          <content>true</content>
          <allowWildcards>false</allowWildcards>
          <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
          <ignoreComments>false</ignoreComments>
        </con:configuration>
      </con:assertion>
      <con:assertion type="XPath Match" id="4a2dfef1-8e04-4cde-8e90-072b54ea7518" name="Check for existence of [SAVBAL]">
        <con:configuration>
          <path>exists( //Results/ResultSet/Row/SAVBAL)</path>
          <content>true</content>
          <allowWildcards>false</allowWildcards>
          <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
          <ignoreComments>false</ignoreComments>
        </con:configuration>
      </con:assertion>
      <con:properties>
        <con:property>
          <con:name>fromAccount</con:name>
          <con:value>${SinkDataFromAccountBefore#result}</con:value>
        </con:property>
      </con:properties>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="TransferData" id="5b2d0fb1-23de-4a30-8b55-681e7fe1b067">
    <con:settings/>
    <con:config>
      <script>//Get data values
def fromAccount = context.expand( '${PaymentPlan#Response#$[\'accountNumber\']}' )
def toAccount = context.expand( '${Operations(Transfer)#Response#$[\'operatableAccount\'][0][\'accountNumber\']}' )
def transferAmount = context.expand( '${DataSource#transferAmount}' )
def statementDescription = context.expand( '${DataSource#statementDescription}' )
def repaymentNoOfInstalment = context.expand( '${Repayment(Transfer)#Response#$[\'repaymentOptions\'][0][\'numberOfInstalment\']}' )
def repaymentInstalmentAmount = context.expand( '${Repayment(Transfer)#Response#$[\'repaymentOptions\'][0][\'instalmentAmount\']}' )
def firstInstalmentDate = context.expand( '${PaymentPlan#Response#$[\'newPaymentPlan\'][0][\'firstInstalmentDate\']}' )
def noOfInstalments = context.expand( '${PaymentPlan#Response#$[\'newPaymentPlan\'][0][\'noOfInstalments\']}' )
def instalmentAmount = context.expand( '${PaymentPlan#Response#$[\'newPaymentPlan\'][0][\'instalmentAmount\']}' )

//Build JSON message
def jsonMessage = '{"fromAccount": "'+fromAccount+'","toAccount": "'+toAccount+'","transferAmount": "'+transferAmount+'","statementDescription": "'+statementDescription+'","repaymentNoOfInstalment": "'+repaymentNoOfInstalment+'","repaymentInstalmentAmount": "'+repaymentInstalmentAmount+'","paymentPlan": [ { "firstInstalmentDate": "'+firstInstalmentDate+'","noOfInstalments": "'+noOfInstalments+'","instalmentAmount": "'+instalmentAmount+'" } ] }'

log.info(jsonMessage)
//Create variable 
testRunner.testCase.setPropertyValue( "JSONMessageProperty", jsonMessage )</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="Transfer" id="cc2664eb-19d3-4977-8cdd-23a68215f63e">
    <con:settings/>
    <con:config service="Access Facility" resourcePath="/access-facility/transfer" methodName="Transfer" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="Transfer" id="25faacab-7612-4435-99a3-007ff47aca74" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${TransferToken#result}"/>
  &lt;con:entry key="sourceSystemIdentifier" value="USSD"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
        <con:endpoint>https://onramp-int.int.capinet/credit-services/creditproductservice-v1/credit-products/v1/access-facility</con:endpoint>
        <con:request>${#TestCase#JSONMessageProperty}</con:request>
        <con:originalUri>https://onramp-int.int.capinet/credit-services/creditproductservice-v1/credit-products/v1/access-facility/transfer</con:originalUri>
        <con:assertion type="JsonPath Existence Match" id="dd054223-be10-49f5-a8be-c109d35923c8" name="Check for existence of [fromAccount]">
          <con:configuration>
            <path>$['fromAccount']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="ae05afc2-f2fb-4c77-9a95-cb62bdef3905" name="Check for existence of [toAccount]">
          <con:configuration>
            <path>$['toAccount']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="055bfeeb-b0f5-4382-aedb-ca8f26ca0b3d" name="Check for existence of [transferAmount]">
          <con:configuration>
            <path>$['transferAmount']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="2012d838-2f52-4421-a911-424ef8a41030" name="Check for existence of [paymentPlan]">
          <con:configuration>
            <path>$['paymentPlan']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters/>
        <con:environmentSpec>
          <con:entry environmentId="abe22d3f-c611-48a2-aa3a-bbb3916687f4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89bfff1c-d314-464e-8dc2-7c368a0011af">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="SinkDataFromAccountAfter" id="7723c2b8-8f0c-4448-8c82-fc6525e48f2b">
    <con:settings/>
    <con:config>
      <script>import com.eviware.soapui.support.JsonUtil

//fromAccount
//def fromAccount = context.expand( '${Transfer#Response#$[\'fromAccount\']}' )
def fromAccount = context.expand( '${PaymentPlan#Response#$[\'accountNumber\']}' )
//Remove last character from accountNumber string
def accessFacility = fromAccount.substring(0, fromAccount.length() - 1)</script>
    </con:config>
  </con:testStep>
  <con:testStep type="jdbc" name="SQLQueryAfter" id="6c80202b-86c4-409e-8209-e0f7584856e8">
    <con:settings>
      <con:setting id="prettyPrintResponse">true</con:setting>
    </con:settings>
    <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:driver>com.microsoft.sqlserver.jdbc.SQLServerDriver</con:driver>
      <con:connectionString>${ConnectionString#ConnectionString}</con:connectionString>
      <con:connectionProperties/>
      <con:query>SELECT TOP 100
DBO.GETCIFWITHCHECKDIGIT(RIGHT(A.CUSTOMER_NO,8)) AS 'CUSTOMER',
DBO.GETACCOUNTWITHCHECKDIGIT(RIGHT(A.KEY_1,9))   AS 'AF ACCT',
A.LOAN_BAL                                       AS 'AF BAL',
A.THEO_LOAN_BAL                                  AS 'AF THEO BAL',
DBO.GETACCOUNTWITHCHECKDIGIT(RIGHT(B.KEY_1,9))   AS 'SAV ACCT',
B.CURR_BAL                                       AS 'SAV BAL',
DBO.GETACCOUNTWITHCHECKDIGIT(RIGHT(CC.KEY_1,9))  AS 'CC ACCT',
CC.CURR_BAL AS 'CC BAL',
D.INIT_FEE_AMT_1                           AS 'INIT FEE'
FROM BORM A (NOLOCK)
JOIN INVM B (NOLOCK) ON A.CUSTOMER_NO = B.CUSTOMER_NO AND ACCT_TYPE = 0X30333030 AND CURR_STATUS = 0X3030
LEFT JOIN INVM CC (NOLOCK) ON A.CUSTOMER_NO = CC.CUSTOMER_NO AND CC.ACCT_TYPE = 0X30313031 AND CC.CURR_STATUS = 0X3030
LEFT JOIN BORN D (NOLOCK) ON D.KEY_1 = A.KEY_1
WHERE A.ACT_TYPE = 0X36303030 -- ACCESS FACILITY ACCOUNT TYPE 6000
AND STAT = 0X3038 --08 OPEN STATUS 
AND RIGHT(A.KEY_1,9) = :fromAccount
AND A.KEY_1 > 0X30303330303030303030313635383037343639 
--AND (A.LOAN_BAL > 0 AND A.THEO_LOAN_BAL > 0 )</con:query>
      <con:assertion type="XPath Match" id="28ceb49b-0e30-4155-910b-9f606a8840cb" name="Check for existence of [CUSTOMER]">
        <con:configuration>
          <path>exists( //Results/ResultSet/Row/CUSTOMER)</path>
          <content>true</content>
          <allowWildcards>false</allowWildcards>
          <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
          <ignoreComments>false</ignoreComments>
        </con:configuration>
      </con:assertion>
      <con:assertion type="XPath Match" id="924946fc-7a8d-4af7-b099-cfa3c7d5de31" name="Check for existence of [AFACCT]">
        <con:configuration>
          <path>exists( //Results/ResultSet/Row/AFACCT)</path>
          <content>true</content>
          <allowWildcards>false</allowWildcards>
          <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
          <ignoreComments>false</ignoreComments>
        </con:configuration>
      </con:assertion>
      <con:assertion type="XPath Match" id="d15e2d5c-5e42-4bf6-87a1-779d0d5cc7c5" name="Check for existence of [AFBAL]">
        <con:configuration>
          <path>exists( //Results/ResultSet/Row/AFBAL)</path>
          <content>true</content>
          <allowWildcards>false</allowWildcards>
          <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
          <ignoreComments>false</ignoreComments>
        </con:configuration>
      </con:assertion>
      <con:assertion type="XPath Match" id="d9f12dca-3f23-420c-a616-7653b580351b" name="Check for existence of [AFTHEOBAL]">
        <con:configuration>
          <path>exists( //Results/ResultSet/Row/AFTHEOBAL)</path>
          <content>true</content>
          <allowWildcards>false</allowWildcards>
          <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
          <ignoreComments>false</ignoreComments>
        </con:configuration>
      </con:assertion>
      <con:assertion type="XPath Match" id="e5bb8405-f3c0-4d6b-97f0-4d6569978496" name="Check for existence of [SAVACCT]">
        <con:configuration>
          <path>exists( //Results/ResultSet/Row/SAVACCT)</path>
          <content>true</content>
          <allowWildcards>false</allowWildcards>
          <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
          <ignoreComments>false</ignoreComments>
        </con:configuration>
      </con:assertion>
      <con:assertion type="XPath Match" id="4a2dfef1-8e04-4cde-8e90-072b54ea7518" name="Check for existence of [SAVBAL]">
        <con:configuration>
          <path>exists( //Results/ResultSet/Row/SAVBAL)</path>
          <content>true</content>
          <allowWildcards>false</allowWildcards>
          <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
          <ignoreComments>false</ignoreComments>
        </con:configuration>
      </con:assertion>
      <con:properties>
        <con:property>
          <con:name>fromAccount</con:name>
          <con:value>${SinkDataFromAccountAfter#result}</con:value>
        </con:property>
      </con:properties>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="TestScript" id="9ef56dc6-5698-4e34-b459-b69a0c786439">
    <con:settings/>
    <con:config>
      <script>import jxl.*
import jxl.write.*
import com.eviware.soapui.support.XmlHolder

//Get current timestamp
def now = Calendar.getInstance()
String TimeStamp; 
Timestamp = now.format("'-Date-'dd-MM-yyyy");

//Create new excel file
file = new File("C://Temp//OutputResult"+Timestamp+".xls")
if(!file.exists()){
	log.info "File does not exist, creating new worksheet.";
	WritableWorkbook workbook1 = Workbook.createWorkbook(file)

	//Create worksheets
	SheetName1 = "ProductInfoResults"
	WritableSheet sheet1 = workbook1.createSheet(SheetName1, 0)
	SheetName2 = "TransferResults"
	WritableSheet sheet2 = workbook1.createSheet(SheetName2, 1)
	SheetName3 = "DatabaseBefore"
	WritableSheet sheet3 = workbook1.createSheet(SheetName3, 2)
	SheetName4 = "DatabaseAfter"	
	WritableSheet sheet4 = workbook1.createSheet(SheetName4, 3)
	
	sheet1 = workbook1.getSheet(0)
	newRow1 = sheet1.rows
	rowsLabel1 = newRow1
	rowsValue1 = newRow1 + 1
	
	//Customer Number
	def customerNumber = context.expand( '${DataSource#customerNumber}' )
	Label label1ProductInfo = new Label(0, rowsLabel1, "Customer Number");
	Label value1ProductInfo= new Label(0, rowsValue1, customerNumber);
	sheet1.addCell(label1ProductInfo);
	sheet1.addCell(value1ProductInfo);
	
	//accountNumber
	def accountNumber = context.expand( '${ProductInfo#Response#$[\'accountNumber\']}' )
	Label label2ProductInfo = new Label(1, rowsLabel1, "Account Number");
	Label value2ProductInfo = new Label(1, rowsValue1, accountNumber);
	sheet1.addCell(label2ProductInfo);
	sheet1.addCell(value2ProductInfo);
		
	//approvedDate
	def approvedDate = context.expand( '${ProductInfo#Response#$[\'approvedDate\']}' )
	Label label3ProductInfo = new Label(2, rowsLabel1, "Approved Date");
	Label value3ProductInfo = new Label(2, rowsValue1, approvedDate);
	sheet1.addCell(label3ProductInfo);
	sheet1.addCell(value3ProductInfo);
		
	//availableLimit
	def availableLimit = context.expand( '${ProductInfo#Response#$[\'availableLimit\']}' )
	Label label4ProductInfo = new Label(3, rowsLabel1, "Available Limit");
	Label value4ProductInfo = new Label(3, rowsValue1, availableLimit);
	sheet1.addCell(label4ProductInfo);
	sheet1.addCell(value4ProductInfo);
		
	//interestRateYearly
	def interestRateYearly = context.expand( '${ProductInfo#Response#$[\'interestRateYearly\']}' )
	Label label5ProductInfo = new Label(4, rowsLabel1, "Interest Rate Yearly");
	Label value5ProductInfo = new Label(4, rowsValue1, interestRateYearly);
	sheet1.addCell(label5ProductInfo);
	sheet1.addCell(value5ProductInfo);
	
	//accountBalance
	def accountBalance = context.expand( '${ProductInfo#Response#$[\'accountBalance\']}' )
	Label label6ProductInfo = new Label(5, rowsLabel1, "Account Balance");
	Label value6ProductInfo = new Label(5, rowsValue1, accountBalance);
	sheet1.addCell(label6ProductInfo);
	sheet1.addCell(value6ProductInfo);
	
	//availableToTransfer
	def availableToTransfer = context.expand( '${ProductInfo#Response#$[\'availableToTransfer\']}' )
	Label label7ProductInfo = new Label(6, rowsLabel1, "Available To Transfer");
	Label value7ProductInfo = new Label(6, rowsValue1, availableToTransfer);
	sheet1.addCell(label7ProductInfo);
	sheet1.addCell(value7ProductInfo);

	//remainingTerm
	def remainingTerm = context.expand( '${ProductInfo#Response#$[\'remainingTerm\']}' )
	Label label8ProductInfo = new Label(7, rowsLabel1, "Remaining Term");
	Label value8ProductInfo = new Label(7, rowsValue1, remainingTerm);
	sheet1.addCell(label8ProductInfo);
	sheet1.addCell(value8ProductInfo);
	
	//nextInstalmentDue
	def nextInstalmentDue = context.expand( '${ProductInfo#Response#$[\'nextInstalmentDue\']}' )
	Label label9ProductInfo = new Label(8, rowsLabel1, "Next Instalment Due");
	Label value9ProductInfo = new Label(8, rowsValue1, nextInstalmentDue);
	sheet1.addCell(label9ProductInfo);
	sheet1.addCell(value9ProductInfo);
	
	//nextInstalmentDate
	def nextInstalmentDate = context.expand( '${ProductInfo#Response#$[\'nextInstalmentDate\']}' )
	Label label10ProductInfo = new Label(9, rowsLabel1, "Next Instalment Date");
	Label value10ProductInfo = new Label(9, rowsValue1, nextInstalmentDate);
	sheet1.addCell(label10ProductInfo);
	sheet1.addCell(value10ProductInfo);
	
	//autoLimitIncrease
	def autoLimitIncrease = context.expand( '${ProductInfo#Response#$[\'autoLimitIncrease\']}' )
	Label label11ProductInfo = new Label(10, rowsLabel1, "Auto Limit Increase");
	Label value11ProductInfo = new Label(10, rowsValue1, autoLimitIncrease);
	sheet1.addCell(label11ProductInfo);
	sheet1.addCell(value11ProductInfo);
	
	//monthlyServiceFee
	def monthlyServiceFee = context.expand( '${ProductInfo#Response#$[\'monthlyServiceFee\']}' )
	Label label12ProductInfo = new Label(11, rowsLabel1, "Monthly Service Fee");
	Label value12ProductInfo = new Label(11, rowsValue1, monthlyServiceFee);
	sheet1.addCell(label12ProductInfo);
	sheet1.addCell(value12ProductInfo);
	
	//minimumTerm
	def minimumTerm = context.expand( '${ProductInfo#Response#$[\'minimumTerm\']}' )
	Label label13ProductInfo = new Label(12, rowsLabel1, "Minimum Term");
	Label value13ProductInfo = new Label(12, rowsValue1, minimumTerm);
	sheet1.addCell(label13ProductInfo);
	sheet1.addCell(value13ProductInfo);
	
	//maximumTerm
	def maximumTerm = context.expand( '${ProductInfo#Response#$[\'maximumTerm\']}' )
	Label label14ProductInfo = new Label(13, rowsLabel1, "Maximum Term");
	Label value14ProductInfo = new Label(13, rowsValue1, maximumTerm);
	sheet1.addCell(label14ProductInfo);
	sheet1.addCell(value14ProductInfo);
	
	//maximumRepayment
	def maximumRepayment = context.expand( '${ProductInfo#Response#$[\'maximumRepayment\']}' )
	Label label15ProductInfo = new Label(14, rowsLabel1, "Maximum Repayment");
	Label value15ProductInfo = new Label(14, rowsValue1, maximumRepayment);
	sheet1.addCell(label15ProductInfo);
	sheet1.addCell(value15ProductInfo);
	
	//termBasis
	def termBasis = context.expand( '${ProductInfo#Response#$[\'termBasis\']}' )
	Label label16ProductInfo = new Label(15, rowsLabel1, "Term Basis");
	Label value16ProductInfo = new Label(15, rowsValue1, termBasis);
	sheet1.addCell(label16ProductInfo);
	sheet1.addCell(value16ProductInfo);
	
	//lastArrearsDate
	def lastArrearsDate = context.expand( '${ProductInfo#Response#$[\'lastArrearsDate\']}' )
	Label label17ProductInfo = new Label(16, rowsLabel1, "Last Arrears Date");
	Label value17ProductInfo = new Label(16, rowsValue1, lastArrearsDate);
	sheet1.addCell(label17ProductInfo);
	sheet1.addCell(value17ProductInfo);
	
	//decemberArrears
	def decemberArrears = context.expand( '${ProductInfo#Response#$[\'decemberArrears\']}' )
	Label label18ProductInfo = new Label(17, rowsLabel1, "December Arrears");
	Label value18ProductInfo = new Label(17, rowsValue1, decemberArrears);
	sheet1.addCell(label18ProductInfo);
	sheet1.addCell(value18ProductInfo);
	
	//totalArrearsPayable
	def totalArrearsPayable = context.expand( '${ProductInfo#Response#$[\'totalArrearsPayable\']}' )
	Label label19ProductInfo = new Label(18, rowsLabel1, "Total Arrears Payable");
	Label value19ProductInfo = new Label(18, rowsValue1, totalArrearsPayable);
	sheet1.addCell(label19ProductInfo);
	sheet1.addCell(value19ProductInfo);
	
	//productInsurance
	def productInsurance = "-"
	Label label20ProductInfo = new Label(19, rowsLabel1, "Product Insurance");
	Label value20ProductInfo = new Label(19, rowsValue1, productInsurance);
	sheet1.addCell(label20ProductInfo);
	sheet1.addCell(value20ProductInfo);
	
	//insuranceExpiry
	def insuranceExpiry = context.expand( '${ProductInfo#Response#$[\'productInsurance\'][\'insuranceExpiry\']}' )
	Label label21ProductInfo = new Label(20, rowsLabel1, "Insurance Expiry");
	Label value21ProductInfo = new Label(20, rowsValue1, insuranceExpiry);
	sheet1.addCell(label21ProductInfo);
	sheet1.addCell(value21ProductInfo);
	
	//insuranceDeathRate
	def insuranceDeathRate = context.expand( '${ProductInfo#Response#$[\'productInsurance\'][\'insuranceDeathRate\']}' )
	Label label22ProductInfo = new Label(21, rowsLabel1, "Insurance Death Rate");
	Label value22ProductInfo = new Label(21, rowsValue1, insuranceDeathRate);
	sheet1.addCell(label22ProductInfo);
	sheet1.addCell(value22ProductInfo);
	
	//insuranceDisabilityRate
	def insuranceDisabilityRate = context.expand( '${ProductInfo#Response#$[\'productInsurance\'][\'insuranceDisabilityRate\']}' )
	Label label23ProductInfo = new Label(22, rowsLabel1, "Insurance Disability Rate");
	Label value23ProductInfo = new Label(22, rowsValue1, insuranceDisabilityRate);
	sheet1.addCell(label23ProductInfo);
	sheet1.addCell(value23ProductInfo);
	
	//insuranceRetrenchmentRate
	def insuranceRetrenchmentRate = context.expand( '${ProductInfo#Response#$[\'productInsurance\'][\'insuranceRetrenchmentRate\']}' )
	Label label24ProductInfo = new Label(23, rowsLabel1, "Insurance Retrenchment Rate");
	Label value24ProductInfo = new Label(23, rowsValue1, insuranceRetrenchmentRate);
	sheet1.addCell(label24ProductInfo);
	sheet1.addCell(value24ProductInfo);
	
	//insuranceOption
	def insuranceOption = context.expand( '${ProductInfo#Response#$[\'productInsurance\'][\'insuranceOption\']}' )
	Label label25ProductInfo = new Label(24, rowsLabel1, "Insurance Option");
	Label value25ProductInfo = new Label(24, rowsValue1, insuranceOption);
	sheet1.addCell(label25ProductInfo);
	sheet1.addCell(value25ProductInfo);
	
	//clientName
	def clientName = context.expand( '${ProductInfo#Response#$[\'clientName\']}' )
	Label label26ProductInfo = new Label(25, rowsLabel1, "Client Name");
	Label value26ProductInfo = new Label(25, rowsValue1, clientName);
	sheet1.addCell(label26ProductInfo);
	sheet1.addCell(value26ProductInfo);
	
	//fixedIntiationFee
	def fixedInitiationFee = context.expand( '${ProductInfo#Response#$[\'fixedInitiationFee\']}' )
	Label label27ProductInfo = new Label(26, rowsLabel1, "Fixed Initiation Fee");
	Label value27ProductInfo = new Label(26, rowsValue1, fixedInitiationFee);
	sheet1.addCell(label27ProductInfo);
	sheet1.addCell(value27ProductInfo);
	
	//interestRateMargin
	def interestRateMargin = context.expand( '${ProductInfo#Response#$[\'interestRateMargin\']}' )
	Label label28ProductInfo = new Label(27, rowsLabel1, "Interest Rate Margin");
	Label value28ProductInfo = new Label(27, rowsValue1, interestRateMargin);
	sheet1.addCell(label28ProductInfo);
	sheet1.addCell(value28ProductInfo);
	
	//maxIntiationFee
	def maxInitiationFee = context.expand( '${ProductInfo#Response#$[\'maxInitiationFee\']}' )
	Label label29ProductInfo = new Label(28, rowsLabel1, "Max Initiation Fee");
	Label value29ProductInfo = new Label(28, rowsValue1, maxInitiationFee);
	sheet1.addCell(label29ProductInfo);
	sheet1.addCell(value29ProductInfo);
	
	//interestRateType
	def interestRateType = context.expand( '${ProductInfo#Response#$[\'interestRateType\']}' )
	Label label30ProductInfo = new Label(29, rowsLabel1, "Interest Rate Type");
	Label value30ProductInfo = new Label(29, rowsValue1, interestRateType);
	sheet1.addCell(label30ProductInfo);
	sheet1.addCell(value30ProductInfo);
	
	//initiationFee1
	def initiationFee1 = context.expand( '${ProductInfo#Response#$[\'initiationFee1\']}' )
	Label label31ProductInfo = new Label(30, rowsLabel1, "Initiation Fee 1");
	Label value31ProductInfo = new Label(30, rowsValue1, initiationFee1);
	sheet1.addCell(label31ProductInfo);
	sheet1.addCell(value31ProductInfo);
	
	//initiationFee2
	def initiationFee2 = context.expand( '${ProductInfo#Response#$[\'initiationFee2\']}' )
	Label label32ProductInfo = new Label(31, rowsLabel1, "Initiation Fee 2");
	Label value32ProductInfo = new Label(31, rowsValue1, initiationFee2);
	sheet1.addCell(label32ProductInfo);
	sheet1.addCell(value32ProductInfo);
	
	//cummulativeTransferTotal
	def cummulativeTransferTotal = context.expand( '${ProductInfo#Response#$[\'cummulativeTransferTotal\']}' )
	Label label33ProductInfo = new Label(32, rowsLabel1, "Cummulative Transfer Total");
	Label value33ProductInfo = new Label(32, rowsValue1, cummulativeTransferTotal);
	sheet1.addCell(label33ProductInfo);
	sheet1.addCell(value33ProductInfo);
	
	//nonUsageServiceFee
	def nonUsageServiceFee = context.expand( '${ProductInfo#Response#$[\'nonUsageServiceFee\']}' )
	Label label34ProductInfo = new Label(33, rowsLabel1, "Non Usage Service Fee");
	Label value34ProductInfo = new Label(33, rowsValue1, nonUsageServiceFee);
	sheet1.addCell(label34ProductInfo);
	sheet1.addCell(value34ProductInfo);
	
	//initiationFeeBracketAmt
	def initiationFeeBracketAmt = context.expand( '${ProductInfo#Response#$[\'initiationFeeBracketAmt\']}' )
	Label label35ProductInfo = new Label(34, rowsLabel1, "Initiation Fee Bracket Amt");
	Label value35ProductInfo = new Label(34, rowsValue1, initiationFeeBracketAmt);
	sheet1.addCell(label35ProductInfo);
	sheet1.addCell(value35ProductInfo);
	
	//riskCategory
	def riskCategory = context.expand( '${ProductInfo#Response#$[\'riskCategory\']}' )
	Label label36ProductInfo = new Label(35, rowsLabel1, "Risk Category");
	Label value36ProductInfo = new Label(35, rowsValue1, riskCategory);
	sheet1.addCell(label36ProductInfo);
	sheet1.addCell(value36ProductInfo);
	
	//minimumTransferAmount
	def minimumTransferAmount = context.expand( '${ProductInfo#Response#$[\'minimumTransferAmount\']}' )
	Label label37ProductInfo = new Label(36, rowsLabel1, "Minimum Transfer Amount");
	Label value37ProductInfo = new Label(36, rowsValue1, minimumTransferAmount);
	sheet1.addCell(label37ProductInfo);
	sheet1.addCell(value37ProductInfo);
	
	//contractedCapital
	def contractedCapital = context.expand( '${ProductInfo#Response#$[\'contractedCapital\']}' )
	Label label38ProductInfo = new Label(37, rowsLabel1, "Contracted Capital");
	Label value38ProductInfo = new Label(37, rowsValue1, contractedCapital);
	sheet1.addCell(label38ProductInfo);
	sheet1.addCell(value38ProductInfo);
	
	//contractedTerm
	def contractedTerm = context.expand( '${ProductInfo#Response#$[\'contractedTerm\']}' )
	Label label39ProductInfo = new Label(38, rowsLabel1, "Contracted Term");
	Label value39ProductInfo = new Label(38, rowsValue1, contractedTerm);
	sheet1.addCell(label39ProductInfo);
	sheet1.addCell(value39ProductInfo);
	
	//contractCapitalDate
	def contractCapitalDate = context.expand( '${ProductInfo#Response#$[\'contractCapitalDate\']}' )
	Label label40ProductInfo = new Label(39, rowsLabel1, "Contract Capital Date");
	Label value40ProductInfo = new Label(39, rowsValue1, contractCapitalDate);
	sheet1.addCell(label40ProductInfo);
	sheet1.addCell(value40ProductInfo);
	
	//collectionDate
	def collectionDate = context.expand( '${ProductInfo#Response#$[\'collectionDate\']}' )
	Label label41ProductInfo = new Label(40, rowsLabel1, "Collection Date");
	Label value41ProductInfo = new Label(40, rowsValue1, collectionDate);
	sheet1.addCell(label41ProductInfo);
	sheet1.addCell(value41ProductInfo);
	
	//contractedRepayment
	def contractedRepayment = context.expand( '${ProductInfo#Response#$[\'contractedRepayment\']}' )
	Label label42ProductInfo = new Label(41, rowsLabel1, "Contracted Repayment");
	Label value42ProductInfo = new Label(41, rowsValue1, contractedRepayment);
	sheet1.addCell(label42ProductInfo);
	sheet1.addCell(value42ProductInfo);
	
	//suspensiveCondition
	def suspensiveCondition = context.expand( '${ProductInfo#Response#$[\'suspensiveCondition\']}' )
	Label label43ProductInfo = new Label(42, rowsLabel1, "Suspensive Condition");
	Label value43ProductInfo = new Label(42, rowsValue1, suspensiveCondition);
	sheet1.addCell(label43ProductInfo);
	sheet1.addCell(value43ProductInfo);
	if(suspensiveCondition.equals("Y")) {
		log.info "FAIL: Client has a suspensive condition."
		//testRunner.fail(testRunner.testCase.name + " Failed: Client has a suspensive condition.")
	}
	
	//ccsStatus
	def ccsStatus = context.expand( '${ProductInfo#Response#$[\'ccsStatus\']}' )
	Label label44ProductInfo = new Label(43, rowsLabel1, "CCS Status");
	Label value44ProductInfo = new Label(43, rowsValue1, ccsStatus);
	sheet1.addCell(label44ProductInfo);
	sheet1.addCell(value44ProductInfo);
	
	//deActiveDate
	def deActiveDate = context.expand( '${ProductInfo#Response#$[\'deActiveDate\']}' )
	Label label45ProductInfo = new Label(44, rowsLabel1, "Deactive Date");
	Label value45ProductInfo = new Label(44, rowsValue1, deActiveDate);
	sheet1.addCell(label45ProductInfo);
	sheet1.addCell(value45ProductInfo);
	
	//suspensiveDate
	def suspensiveDate = context.expand( '${ProductInfo#Response#$[\'suspensiveDate\']}' )
	Label label46ProductInfo = new Label(45, rowsLabel1, "Suspensive Date");
	Label value46ProductInfo = new Label(45, rowsValue1, suspensiveDate);
	sheet1.addCell(label46ProductInfo);
	sheet1.addCell(value46ProductInfo);
	
	//loanStop
	def loanStop = context.expand( '${ProductInfo#Response#$[\'loanStop\']}' )
	Label label47ProductInfo = new Label(46, rowsLabel1, "Loan Stop");
	Label value47ProductInfo = new Label(46, rowsValue1, loanStop);
	sheet1.addCell(label47ProductInfo);
	sheet1.addCell(value47ProductInfo);
	
	//clientUnderAdminstration
	def clientUnderAdminstration = context.expand( '${ProductInfo#Response#$[\'clientUnderAdminstration\']}' )
	Label label48ProductInfo = new Label(47, rowsLabel1, "Client Under Adminstration");
	Label value48ProductInfo = new Label(47, rowsValue1, clientUnderAdminstration);
	sheet1.addCell(label48ProductInfo);
	sheet1.addCell(value48ProductInfo);
	
	//afInArrears
	def afInArrears = context.expand( '${ProductInfo#Response#$[\'afInArrears\']}' )
	Label label49ProductInfo = new Label(48, rowsLabel1, "AF In Arrears");
	Label value49ProductInfo = new Label(48, rowsValue1, afInArrears);
	sheet1.addCell(label49ProductInfo);
	sheet1.addCell(value49ProductInfo);
	
	//unEmployed
	def unEmployed = context.expand( '${ProductInfo#Response#$[\'unEmployed\']}' )
	Label label50ProductInfo = new Label(49, rowsLabel1, "Unemployed");
	Label value50ProductInfo = new Label(49, rowsValue1, unEmployed);
	sheet1.addCell(label50ProductInfo);
	sheet1.addCell(value50ProductInfo);
	
	//debtRestructuring
	def debtRestructuring = context.expand( '${ProductInfo#Response#$[\'debtRestructuring\']}' )
	Label label51ProductInfo = new Label(50, rowsLabel1, "Debt Restructuring");
	Label value51ProductInfo = new Label(50, rowsValue1, debtRestructuring);
	sheet1.addCell(label51ProductInfo);
	sheet1.addCell(value51ProductInfo);
	
	//otherAccountInArrears
	def otherAccountInArrears = context.expand( '${ProductInfo#Response#$[\'otherAccountInArrears\']}' )
	Label label52ProductInfo = new Label(51, rowsLabel1, "Other Account In Arrears");
	Label value52ProductInfo = new Label(51, rowsValue1, otherAccountInArrears);
	sheet1.addCell(label52ProductInfo);
	sheet1.addCell(value52ProductInfo);
	
	//TRANSFER
	
	//Sheet2
	sheet2 = workbook1.getSheet(1)
	newRow2 = sheet2.rows
	rowsLabel2 = newRow2
	rowsValue2 = newRow2 + 1
	
	//Customer Number
	Label label1Transfer = new Label(0, rowsLabel2, "Customer Number");
	Label value1Transfer = new Label(0, rowsValue2, customerNumber);
	sheet2.addCell(label1Transfer);
	sheet2.addCell(value1Transfer);
	
	//fromAccount
	def fromAccount = context.expand( '${Transfer#Response#$[\'fromAccount\']}' )
	Label label2Transfer = new Label(1, rowsLabel2, "From Account");
	Label value2Transfer = new Label(1, rowsValue2, fromAccount);
	sheet2.addCell(label2Transfer);
	sheet2.addCell(value2Transfer);
	
	//toAccount
	def toAccount = context.expand( '${Transfer#Response#$[\'toAccount\']}' )
	Label label3Transfer = new Label(2, rowsLabel2, "To Account");
	Label value3Transfer = new Label(2, rowsValue2, toAccount);
	sheet2.addCell(label3Transfer);
	sheet2.addCell(value3Transfer);
	
	//transferAmount
	def transferAmount = context.expand( '${Transfer#Response#$[\'transferAmount\']}' )
	Label label4Transfer = new Label(3, rowsLabel2, "Transfer Amount");
	Label value4Transfer = new Label(3, rowsValue2, transferAmount);
	sheet2.addCell(label4Transfer);
	sheet2.addCell(value4Transfer);
	
	//paymentPlan
	Label label5Transfer = new Label(4, rowsLabel2, "Payment Plan");
	Label value5Transfer = new Label(4, rowsValue2, "-");
	sheet2.addCell(label5Transfer);
	sheet2.addCell(value5Transfer);
	
	//firstInstalmentDate1
	def firstInstalmentDate1 = context.expand( '${Transfer#Response#$[\'paymentPlan\'][0][\'firstInstalmentDate\']}' )
	Label label6Transfer = new Label(5, rowsLabel2, "First Instalment Date 1");
	Label value6Transfer = new Label(5, rowsValue2, firstInstalmentDate1);
	sheet2.addCell(label6Transfer);
	sheet2.addCell(value6Transfer);
	
	//noOfInstalments1
	def noOfInstalments1 = context.expand( '${Transfer#Response#$[\'paymentPlan\'][0][\'noOfInstalments\']}' )
	Label label7Transfer = new Label(6, rowsLabel2, "No Of Instalments 1");
	Label value7Transfer = new Label(6, rowsValue2, noOfInstalments1);
	sheet2.addCell(label7Transfer);
	sheet2.addCell(value7Transfer);
	
	//instalmentAmount1
	def instalmentAmount1 = context.expand( '${Transfer#Response#$[\'paymentPlan\'][0][\'instalmentAmount\']}' )
	Label label8Transfer = new Label(7, rowsLabel2, "Instalment Amount 1");
	Label value8Transfer = new Label(7, rowsValue2, instalmentAmount1);
	sheet2.addCell(label8Transfer);
	sheet2.addCell(value8Transfer);
	
	//firstInstalmentDate2
	def firstInstalmentDate2 = context.expand( '${Transfer#Response#$[\'paymentPlan\'][1][\'firstInstalmentDate\']}' )
	Label label9Transfer = new Label(8, rowsLabel2, "First Instalment Date 2");
	Label value9Transfer = new Label(8, rowsValue2, firstInstalmentDate2);
	sheet2.addCell(label9Transfer);
	sheet2.addCell(value9Transfer);
	
	//noOfInstalments2
	def noOfInstalments2 = context.expand( '${Transfer#Response#$[\'paymentPlan\'][1][\'noOfInstalments\']}' )
	Label label10Transfer = new Label(9, rowsLabel2, "No Of Instalments 2");
	Label value10Transfer = new Label(9, rowsValue2, noOfInstalments2);
	sheet2.addCell(label10Transfer);
	sheet2.addCell(value10Transfer);
	
	//instalmentAmount2
	def instalmentAmount2 = context.expand( '${Transfer#Response#$[\'paymentPlan\'][1][\'instalmentAmount\']}' )
	Label label11Transfer = new Label(10, rowsLabel2, "Instalment Amount 2");
	Label value11Transfer = new Label(10, rowsValue2, instalmentAmount2);
	sheet2.addCell(label11Transfer);
	sheet2.addCell(value11Transfer);
	
	
	//Database BEFORE
	
	//Sheet3
	sheet3 = workbook1.getSheet( 2 )
	newRow3 = sheet3.rows
	rowsLabel3 = newRow3 
	rowsValue3 = newRow3 + 1
	
	//Customer Number
	Label label1Before = new Label(0, rowsLabel2, "Customer Number");
	Label value1Before = new Label(0, rowsValue2, customerNumber);
	sheet3.addCell(label1Before);
	sheet3.addCell(value1Before);
	
	//CUSTOMER
	def CUSTOMERBefore = context.expand( '${SQLQueryBefore#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/CUSTOMER[1]}' )
	Label label2Before = new Label(1, rowsLabel3, "CUSTOMER(Before)");
	Label value2Before = new Label(1, rowsValue3, CUSTOMERBefore);
	sheet3.addCell(label2Before);
	sheet3.addCell(value2Before);
	
	//AFACCT
	def AFACCTBefore = context.expand( '${SQLQueryBefore#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AFACCT[1]}' )
	Label label3Before = new Label(2, rowsLabel3, "AFACCT(Before)");
	Label value3Before = new Label(2, rowsValue3, AFACCTBefore);
	sheet3.addCell(label3Before);
	sheet3.addCell(value3Before);
	
	//AFBAL
	def AFBALBefore = context.expand( '${SQLQueryBefore#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AFBAL[1]}' )// as Double
	//assert AFBALBefore instanceof Double
	Label label4Before = new Label(3, rowsLabel3, "AFBAL(Before)");
	Label value4Before = new Label(3, rowsValue3, AFBALBefore);
	sheet3.addCell(label4Before);
	sheet3.addCell(value4Before);
	
	//AFTHEOBAL
	def AFTHEOBALBefore = context.expand( '${SQLQueryBefore#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AFTHEOBAL[1]}' )//as Double
	//assert AFTHEOBALBefore instanceof Double
	Label label5Before = new Label(4, rowsLabel3, "AFTHEOBAL(Before)");
	Label value5Before = new Label(4, rowsValue3, AFTHEOBALBefore);
	sheet3.addCell(label5Before);
	sheet3.addCell(value5Before);
	
	//SAVACCTBefore
	def SAVACCTBefore = context.expand( '${SQLQueryBefore#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/SAVACCT[1]}' )
	Label label6Before = new Label(5, rowsLabel3, "SAVACCT(Before)");
	Label value6Before = new Label(5, rowsValue3, SAVACCTBefore);
	sheet3.addCell(label6Before);
	sheet3.addCell(value6Before);
	
	//SAVBALBefore
	def SAVBALBefore = context.expand( '${SQLQueryBefore#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/SAVBAL[1]}' ) //as Double
	//assert SAVBALBefore instanceof Double
	Label label7Before = new Label(6, rowsLabel3, "SAVBAL(Before)");
	Label value7Before = new Label(6, rowsValue3, SAVBALBefore);
	sheet3.addCell(label7Before);
	sheet3.addCell(value7Before);
	
	//CCACCTBefore
	def CCACCTBefore =  context.expand( '${SQLQueryBefore#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/CCACCT[1]}' )
	Label label8Before = new Label(7, rowsLabel3, "CCACCT(Before)");
	Label value8Before = new Label(7, rowsValue3, CCACCTBefore);
	sheet3.addCell(label8Before);
	sheet3.addCell(value8Before);
	
	//CCBALBefore
	def CCBALBefore = context.expand( '${SQLQueryBefore#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/CCBAL[1]}' )
	Label label9Before = new Label(8, rowsLabel3, "CCBAL(Before)");
	Label value9Before = new Label(8, rowsValue3, CCBALBefore);
	sheet3.addCell(label9Before);
	sheet3.addCell(value9Before);
	
	//INITFEEBefore
	def INITFEEBefore = context.expand( '${SQLQueryBefore#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/INITFEE[1]}' )
	Label label10Before = new Label(9, rowsLabel3, "INITFEE(Before)");
	Label value10Before = new Label(9, rowsValue3, INITFEEBefore);
	sheet3.addCell(label10Before);
	sheet3.addCell(value10Before);
		
	//Database AFTER
	
	//Sheet4
	sheet4 = workbook1.getSheet( 3 )
	newRow4 = sheet4.rows
	rowsLabel4 = newRow4
	rowsValue4 = newRow4 + 1
	
	//Customer Number
	Label label1After = new Label(0, rowsLabel2, "Customer Number");
	Label value1After = new Label(0, rowsValue2, customerNumber);
	sheet4.addCell(label1After);
	sheet4.addCell(value1After);
	
	//CUSTOMERAfter
	def CUSTOMERAfter = context.expand( '${SQLQueryAfter#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/CUSTOMER[1]}' )
	Label label2After = new Label(1, rowsLabel3, "CUSTOMER(After)");
	Label value2After = new Label(1, rowsValue3, CUSTOMERAfter);
	sheet4.addCell(label2After);
	sheet4.addCell(value2After);
	
	//AFACCTAfter
	def AFACCTAfter = context.expand( '${SQLQueryAfter#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AFACCT[1]}' )
	Label label3After = new Label(2, rowsLabel3, "AFACCT(After)");
	Label value3After = new Label(2, rowsValue3, AFACCTAfter);
	sheet4.addCell(label3After);
	sheet4.addCell(value3After);
	
	//AFBALAfter
	def AFBALAfter = context.expand( '${SQLQueryAfter#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AFBAL[1]}' ) //as Double
	//assert AFBALAfter instanceof Double		
	Label label4After = new Label(3, rowsLabel3, "AFBAL(After)");
	Label value4After = new Label(3, rowsValue3, AFBALAfter);
	sheet4.addCell(label4After);
	sheet4.addCell(value4After);
	
	//AFTHEOBALAfter
	def AFTHEOBALAfter = context.expand( '${SQLQueryAfter#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AFTHEOBAL[1]}' ) //as Double
	//assert AFTHEOBALAfter instanceof Double
	Label label5After = new Label(4, rowsLabel3, "AFTHEOBAL(After)");
	Label value5After = new Label(4, rowsValue3, AFTHEOBALAfter);
	sheet4.addCell(label5After);
	sheet4.addCell(value5After);
	
	//SAVACCTAfter
	def SAVACCTAfter = context.expand( '${SQLQueryAfter#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/SAVACCT[1]}' )
	Label label6After = new Label(5, rowsLabel3, "SAVACCT(After)");
	Label value6After = new Label(5, rowsValue3, SAVACCTAfter);
	sheet4.addCell(label6After);
	sheet4.addCell(value6After);
	
	//SAVBALAfter
	def SAVBALAfter = context.expand( '${SQLQueryAfter#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/SAVBAL[1]}' )// as Double
	//assert SAVBALAfter instanceof Double
	Label label7After = new Label(6, rowsLabel3, "SAVBAL(After)");
	Label value7After = new Label(6, rowsValue3, SAVBALAfter);
	sheet4.addCell(label7After);
	sheet4.addCell(value7After);
	
	//CCACCTAfter
	def CCACCTAfter =  context.expand( '${SQLQueryAfter#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/CCACCT[1]}' )
	Label label8After = new Label(7, rowsLabel3, "CCACCT(After)");
	Label value8After = new Label(7, rowsValue3, CCACCTAfter);
	sheet4.addCell(label8After);
	sheet4.addCell(value8After);
	
	//CCBALAfter
	def CCBALAfter = context.expand( '${SQLQueryAfter#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/CCBAL[1]}' )
	Label label9After = new Label(8, rowsLabel3, "CCBAL(After)");
	Label value9After = new Label(8, rowsValue3, CCBALAfter);
	sheet4.addCell(label9After);
	sheet4.addCell(value9After);
	
	//INITFEEAfter
	def INITFEEAfter = context.expand( '${SQLQueryAfter#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/INITFEE[1]}' )
	Label label10After = new Label(9, rowsLabel3, "INITFEE(After)");
	Label value10After = new Label(9, rowsValue3, INITFEEAfter);
	sheet4.addCell(label10After);
	sheet4.addCell(value10After);

	//Validation
	/*
	//CIF
	if(CUSTOMERBefore.equals(CUSTOMERAfter)) {
		log.info "PASS: Client CIF is the same."
		def ResultCUSTOMER = "PASS"
	} else {
		log.info "FAIL: Client CIF is not the same, Before:'${customerBefore}' does not match After:'${customerAfter}'."
		def ResultCUSTOMER = "FAIL"
	}
	if (ResultCUSTOMER.equals("FAIL")){
		def RESULT = "FAIL"
		Label label12Transfer = new Label(11, rowsLabel2, "RESULT");
		Label value12Transfer = new Label(11, rowsValue2, RESULT);
		sheet2.addCell(label12Transfer);
		sheet2.addCell(value12Transfer);
	}else{
		def RESULT = "PASS"
		Label label18Transfer = new Label(11, rowsLabel2, "RESULT");
		Label value18Transfer = new Label(11, rowsValue2, RESULT);
		sheet2.addCell(label18Transfer);
		sheet2.addCell(value18Transfer);
	}
		
	//AF Account
	if(AFACCTBefore.equals(AFACCTAfter)) {
		log.info "PASS: Client AF account is the same."
		def ResultAFACCT = "PASS"
	} else {
		log.info "FAIL: Client AF account is not the same, Before:'${afacctBefore}' does not match After:'${afacctAfter}'."
		def ResultAFACCT = "FAIL"
	}
	
	//AF Balance
	def afbaldiffTotal = (AFBALAfter - AFBALBefore)
	if(AFBALBefore.equals(AFBALAfter)) {
		log.info "FAIL: Client AF balance is the same, transfer did not occur."
		def ResultAFBAL = "FAIL"
	} else {
		log.info "PASS: Client AF balance is not the same, Before:'${afbalBefore}' does not match After:'${afbalAfter}'."
		log.info "PASS: Client AF balance difference = '${afbaldiffTotal}'."
		def ResultAFBAL = "PASS"
	}
	
	//AF Theo Balance
	def aftheodiffTotal = (AFTHEOBALAfter - AFTHEOBALBefore)
	if(AFTHEOBALBefore.equals(AFTHEOBALAfter)) {
		log.info "FAIL: Client AF theo balance is the same, transfer did not occur."
		def ResultAFTHEOBAL = "FAIL"
	} else {
		log.info "PASS: Client AF theo balance is not the same, Before:'${aftheobalBefore}' does not match After:'${aftheobalAfter}'."
		log.info "PASS: Client AF theo balance difference = '${aftheodiffTotal} '."
		def ResultAFTHEOBAL = "PASS"
	}
	
	//Sav Acc
	if(SAVACCTBefore.equals(SAVACCTAfter)) {
		log.info "PASS: Client savings account is the same."
		def ResultSAVACCT = "PASS"
	} else {
		log.info "FAIL: Client savings account is not the same, Before:'${savacctBefore}' does not match After:'${savacctAfter}'."
		def ResultSAVACCT = "FAIL"
	}
	
	//Sav Bal
	def savbaldiffTotal = (SAVBALAfter - SAVBALBefore)
	if(SAVBALBefore.equals(SAVBALAfter)) {
		log.info "FAIL: Client AF theo balance is the same."
		def ResultSAVBAL = "FAIL"
	} else {
		log.info "PASS: Client savings balance is not the same, Before:'${savbalBefore}' does not match After:'${savbalAfter}'."
		log.info "PASS: Client savings balance difference = '${savbaldiffTotal} '."
		def ResultSAVBAL = "PASS"
	}

	//Result log
	if(ResultAFACCT.equals("FAIL")){
		def RESULT = "FAIL"
		Label label13Transfer = new Label(11, rowsLabel2, "RESULT");
		Label value13Transfer = new Label(11, rowsValue2, RESULT);
		sheet2.addCell(label13Transfer);
		sheet2.addCell(value13Transfer);
	}else if(ResultAFBAL.equals("FAIL")){
		def RESULT = "FAIL"
		Label label14Transfer = new Label(11, rowsLabel2, "RESULT");
		Label value14Transfer = new Label(11, rowsValue2, RESULT);
		sheet2.addCell(label14Transfer);
		sheet2.addCell(value14Transfer);
	}else if(ResultAFTHEOBAL.equals("FAIL")){
		def RESULT = "FAIL"
		Label label15Transfer = new Label(11, rowsLabel2, "RESULT");
		Label value15Transfer = new Label(11, rowsValue2, RESULT);
		sheet2.addCell(label15Transfer);
		sheet2.addCell(value15Transfer);
	}else if(ResultSAVACCT.equals("FAIL")){
		def RESULT = "FAIL"
		Label label16Transfer = new Label(11, rowsLabel2, "RESULT");
		Label value16Transfer = new Label(11, rowsValue2, RESULT);
		sheet2.addCell(label16Transfer);
		sheet2.addCell(value16Transfer);
	}else if(ResultSAVBAL.equals("FAIL")){
		def RESULT = "FAIL"
		Label label17Transfer = new Label(11, rowsLabel2, "RESULT");
		Label value17Transfer = new Label(11, rowsValue2, RESULT);
		sheet2.addCell(label17Transfer);
		sheet2.addCell(value17Transfer);
	}else{
		def RESULT = "PASS"
		Label label18Transfer = new Label(11, rowsLabel2, "RESULT");
		Label value18Transfer = new Label(11, rowsValue2, RESULT);
		sheet2.addCell(label18Transfer);
		sheet2.addCell(value18Transfer);
	}
	*/
	workbook1.write()
	workbook1.close()

}else{
	log.info "File exists, opening worksheet.";
	WritableWorkbook workbook1 = Workbook.createWorkbook( file, Workbook.getWorkbook(file) )

	sheet1 = workbook1.getSheet(0)
	newRow1 = sheet1.rows
	//rowsLabel1 = newRow1 + 1
	rowsValue1 = newRow1
	
	//Customer Number
	def customerNumber = context.expand( '${DataSource#customerNumber}' )
	//Label label1ProductInfo = new Label(0, rowsLabel1, "Customer Number");
	Label value1ProductInfo= new Label(0, rowsValue1, customerNumber);
	//sheet1.addCell(label1ProductInfo);
	sheet1.addCell(value1ProductInfo);
	
	//accountNumber
	def accountNumber = context.expand( '${ProductInfo#Response#$[\'accountNumber\']}' )
	//Label label2ProductInfo = new Label(1, rowsLabel1, "Account Number");
	Label value2ProductInfo = new Label(1, rowsValue1, accountNumber);
	//sheet1.addCell(label2ProductInfo);
	sheet1.addCell(value2ProductInfo);
		
	//approvedDate
	def approvedDate = context.expand( '${ProductInfo#Response#$[\'approvedDate\']}' )
	//Label label3ProductInfo = new Label(2, rowsLabel1, "Approved Date");
	Label value3ProductInfo = new Label(2, rowsValue1, approvedDate);
	//sheet1.addCell(label3ProductInfo);
	sheet1.addCell(value3ProductInfo);
		
	//availableLimit
	def availableLimit = context.expand( '${ProductInfo#Response#$[\'availableLimit\']}' )
	//Label label4ProductInfo = new Label(3, rowsLabel1, "Available Limit");
	Label value4ProductInfo = new Label(3, rowsValue1, availableLimit);
	//sheet1.addCell(label4ProductInfo);
	sheet1.addCell(value4ProductInfo);
		
	//interestRateYearly
	def interestRateYearly = context.expand( '${ProductInfo#Response#$[\'interestRateYearly\']}' )
	//Label label5ProductInfo = new Label(4, rowsLabel1, "Interest Rate Yearly");
	Label value5ProductInfo = new Label(4, rowsValue1, interestRateYearly);
	//sheet1.addCell(label5ProductInfo);
	sheet1.addCell(value5ProductInfo);
	
	//accountBalance
	def accountBalance = context.expand( '${ProductInfo#Response#$[\'accountBalance\']}' )
	//Label label6ProductInfo = new Label(5, rowsLabel1, "Account Balance");
	Label value6ProductInfo = new Label(5, rowsValue1, accountBalance);
	//sheet1.addCell(label6ProductInfo);
	sheet1.addCell(value6ProductInfo);
	
	//availableToTransfer
	def availableToTransfer = context.expand( '${ProductInfo#Response#$[\'availableToTransfer\']}' )
	//Label label7ProductInfo = new Label(6, rowsLabel1, "Available To Transfer");
	Label value7ProductInfo = new Label(6, rowsValue1, availableToTransfer);
	//sheet1.addCell(label7ProductInfo);
	sheet1.addCell(value7ProductInfo);
	
	//remainingTerm
	def remainingTerm = context.expand( '${ProductInfo#Response#$[\'remainingTerm\']}' )
	//Label label8ProductInfo = new Label(7, rowsLabel1, "Remaining Term");
	Label value8ProductInfo = new Label(7, rowsValue1, remainingTerm);
	//sheet1.addCell(label8ProductInfo);
	sheet1.addCell(value8ProductInfo);
	
	//nextInstalmentDue
	def nextInstalmentDue = context.expand( '${ProductInfo#Response#$[\'nextInstalmentDue\']}' )
	//Label label9ProductInfo = new Label(8, rowsLabel1, "Next Instalment Due");
	Label value9ProductInfo = new Label(8, rowsValue1, nextInstalmentDue);
	//sheet1.addCell(label9ProductInfo);
	sheet1.addCell(value9ProductInfo);
	
	//nextInstalmentDate
	def nextInstalmentDate = context.expand( '${ProductInfo#Response#$[\'nextInstalmentDate\']}' )
	//Label label10ProductInfo = new Label(9, rowsLabel1, "Next Instalment Date");
	Label value10ProductInfo = new Label(9, rowsValue1, nextInstalmentDate);
	//sheet1.addCell(label10ProductInfo);
	sheet1.addCell(value10ProductInfo);
	
	//autoLimitIncrease
	def autoLimitIncrease = context.expand( '${ProductInfo#Response#$[\'autoLimitIncrease\']}' )
	//Label label11ProductInfo = new Label(10, rowsLabel1, "Auto Limit Increase");
	Label value11ProductInfo = new Label(10, rowsValue1, autoLimitIncrease);
	//sheet1.addCell(label11ProductInfo);
	sheet1.addCell(value11ProductInfo);
	
	//monthlyServiceFee
	def monthlyServiceFee = context.expand( '${ProductInfo#Response#$[\'monthlyServiceFee\']}' )
	//Label label12ProductInfo = new Label(11, rowsLabel1, "Monthly Service Fee");
	Label value12ProductInfo = new Label(11, rowsValue1, monthlyServiceFee);
	//sheet1.addCell(label12ProductInfo);
	sheet1.addCell(value12ProductInfo);
	
	//minimumTerm
	def minimumTerm = context.expand( '${ProductInfo#Response#$[\'minimumTerm\']}' )
	//Label label13ProductInfo = new Label(12, rowsLabel1, "Minimum Term");
	Label value13ProductInfo = new Label(12, rowsValue1, minimumTerm);
	//sheet1.addCell(label13ProductInfo);
	sheet1.addCell(value13ProductInfo);
	
	//maximumTerm
	def maximumTerm = context.expand( '${ProductInfo#Response#$[\'maximumTerm\']}' )
	//Label label14ProductInfo = new Label(13, rowsLabel1, "Maximum Term");
	Label value14ProductInfo = new Label(13, rowsValue1, maximumTerm);
	//sheet1.addCell(label14ProductInfo);
	sheet1.addCell(value14ProductInfo);
	
	//maximumRepayment
	def maximumRepayment = context.expand( '${ProductInfo#Response#$[\'maximumRepayment\']}' )
	//Label label15ProductInfo = new Label(14, rowsLabel1, "Maximum Repayment");
	Label value15ProductInfo = new Label(14, rowsValue1, maximumRepayment);
	//sheet1.addCell(label15ProductInfo);
	sheet1.addCell(value15ProductInfo);
	
	//termBasis
	def termBasis = context.expand( '${ProductInfo#Response#$[\'termBasis\']}' )
	//Label label16ProductInfo = new Label(15, rowsLabel1, "Term Basis");
	Label value16ProductInfo = new Label(15, rowsValue1, termBasis);
	//sheet1.addCell(label16ProductInfo);
	sheet1.addCell(value16ProductInfo);
	
	//lastArrearsDate
	def lastArrearsDate = context.expand( '${ProductInfo#Response#$[\'lastArrearsDate\']}' )
	//Label label17ProductInfo = new Label(16, rowsLabel1, "Last Arrears Date");
	Label value17ProductInfo = new Label(16, rowsValue1, lastArrearsDate);
	//sheet1.addCell(label17ProductInfo);
	sheet1.addCell(value17ProductInfo);
	
	//decemberArrears
	def decemberArrears = context.expand( '${ProductInfo#Response#$[\'decemberArrears\']}' )
	//Label label18ProductInfo = new Label(17, rowsLabel1, "December Arrears");
	Label value18ProductInfo = new Label(17, rowsValue1, decemberArrears);
	//sheet1.addCell(label18ProductInfo);
	sheet1.addCell(value18ProductInfo);
	
	//totalArrearsPayable
	def totalArrearsPayable = context.expand( '${ProductInfo#Response#$[\'totalArrearsPayable\']}' )
	//Label label19ProductInfo = new Label(18, rowsLabel1, "Total Arrears Payable");
	Label value19ProductInfo = new Label(18, rowsValue1, totalArrearsPayable);
	//sheet1.addCell(label19ProductInfo);
	sheet1.addCell(value19ProductInfo);
	
	//productInsurance
	def productInsurance = "-"
	//Label label20ProductInfo = new Label(19, rowsLabel1, "Product Insurance");
	Label value20ProductInfo = new Label(19, rowsValue1, productInsurance);
	//sheet1.addCell(label20ProductInfo);
	sheet1.addCell(value20ProductInfo);
	
	//insuranceExpiry
	def insuranceExpiry = context.expand( '${ProductInfo#Response#$[\'productInsurance\'][\'insuranceExpiry\']}' )
	//Label label21ProductInfo = new Label(20, rowsLabel1, "Insurance Expiry");
	Label value21ProductInfo = new Label(20, rowsValue1, insuranceExpiry);
	//sheet1.addCell(label21ProductInfo);
	sheet1.addCell(value21ProductInfo);
	
	//insuranceDeathRate
	def insuranceDeathRate = context.expand( '${ProductInfo#Response#$[\'productInsurance\'][\'insuranceDeathRate\']}' )
	//Label label22ProductInfo = new Label(21, rowsLabel1, "Insurance Death Rate");
	Label value22ProductInfo = new Label(21, rowsValue1, insuranceDeathRate);
	//sheet1.addCell(label22ProductInfo);
	sheet1.addCell(value22ProductInfo);
	
	//insuranceDisabilityRate
	def insuranceDisabilityRate = context.expand( '${ProductInfo#Response#$[\'productInsurance\'][\'insuranceDisabilityRate\']}' )
	//Label label23ProductInfo = new Label(22, rowsLabel1, "Insurance Disability Rate");
	Label value23ProductInfo = new Label(22, rowsValue1, insuranceDisabilityRate);
	//sheet1.addCell(label23ProductInfo);
	sheet1.addCell(value23ProductInfo);
	
	//insuranceRetrenchmentRate
	def insuranceRetrenchmentRate = context.expand( '${ProductInfo#Response#$[\'productInsurance\'][\'insuranceRetrenchmentRate\']}' )
	//Label label24ProductInfo = new Label(23, rowsLabel1, "Insurance Retrenchment Rate");
	Label value24ProductInfo = new Label(23, rowsValue1, insuranceRetrenchmentRate);
	//sheet1.addCell(label24ProductInfo);
	sheet1.addCell(value24ProductInfo);
	
	//insuranceOption
	def insuranceOption = context.expand( '${ProductInfo#Response#$[\'productInsurance\'][\'insuranceOption\']}' )
	//Label label25ProductInfo = new Label(24, rowsLabel1, "Insurance Option");
	Label value25ProductInfo = new Label(24, rowsValue1, insuranceOption);
	//sheet1.addCell(label25ProductInfo);
	sheet1.addCell(value25ProductInfo);
	
	//clientName
	def clientName = context.expand( '${ProductInfo#Response#$[\'clientName\']}' )
	//Label label26ProductInfo = new Label(25, rowsLabel1, "Client Name");
	Label value26ProductInfo = new Label(25, rowsValue1, clientName);
	//sheet1.addCell(label26ProductInfo);
	sheet1.addCell(value26ProductInfo);
	
	//fixedIntiationFee
	def fixedInitiationFee = context.expand( '${ProductInfo#Response#$[\'fixedInitiationFee\']}' )
	//Label label27ProductInfo = new Label(26, rowsLabel1, "Fixed Initiation Fee");
	Label value27ProductInfo = new Label(26, rowsValue1, fixedInitiationFee);
	//sheet1.addCell(label27ProductInfo);
	sheet1.addCell(value27ProductInfo);
	
	//interestRateMargin
	def interestRateMargin = context.expand( '${ProductInfo#Response#$[\'interestRateMargin\']}' )
	//Label label28ProductInfo = new Label(27, rowsLabel1, "Interest Rate Margin");
	Label value28ProductInfo = new Label(27, rowsValue1, interestRateMargin);
	//sheet1.addCell(label28ProductInfo);
	sheet1.addCell(value28ProductInfo);
	
	//maxIntiationFee
	def maxInitiationFee = context.expand( '${ProductInfo#Response#$[\'maxInitiationFee\']}' )
	//Label label29ProductInfo = new Label(28, rowsLabel1, "Max Initiation Fee");
	Label value29ProductInfo = new Label(28, rowsValue1, maxInitiationFee);
	//sheet1.addCell(label29ProductInfo);
	sheet1.addCell(value29ProductInfo);
	
	//interestRateType
	def interestRateType = context.expand( '${ProductInfo#Response#$[\'interestRateType\']}' )
	//Label label30ProductInfo = new Label(29, rowsLabel1, "Interest Rate Type");
	Label value30ProductInfo = new Label(29, rowsValue1, interestRateType);
	//sheet1.addCell(label30ProductInfo);
	sheet1.addCell(value30ProductInfo);
	
	//initiationFee1
	def initiationFee1 = context.expand( '${ProductInfo#Response#$[\'initiationFee1\']}' )
	//Label label31ProductInfo = new Label(30, rowsLabel1, "Initiation Fee 1");
	Label value31ProductInfo = new Label(30, rowsValue1, initiationFee1);
	//sheet1.addCell(label31ProductInfo);
	sheet1.addCell(value31ProductInfo);
	
	//initiationFee2
	def initiationFee2 = context.expand( '${ProductInfo#Response#$[\'initiationFee2\']}' )
	//Label label32ProductInfo = new Label(31, rowsLabel1, "Initiation Fee 2");
	Label value32ProductInfo = new Label(31, rowsValue1, initiationFee2);
	//sheet1.addCell(label32ProductInfo);
	sheet1.addCell(value32ProductInfo);
	
	//cummulativeTransferTotal
	def cummulativeTransferTotal = context.expand( '${ProductInfo#Response#$[\'cummulativeTransferTotal\']}' )
	//Label label33ProductInfo = new Label(32, rowsLabel1, "Cummulative Transfer Total");
	Label value33ProductInfo = new Label(32, rowsValue1, cummulativeTransferTotal);
	//sheet1.addCell(label33ProductInfo);
	sheet1.addCell(value33ProductInfo);
	
	//nonUsageServiceFee
	def nonUsageServiceFee = context.expand( '${ProductInfo#Response#$[\'nonUsageServiceFee\']}' )
	//Label label34ProductInfo = new Label(33, rowsLabel1, "Non Usage Service Fee");
	Label value34ProductInfo = new Label(33, rowsValue1, nonUsageServiceFee);
	//sheet1.addCell(label34ProductInfo);
	sheet1.addCell(value34ProductInfo);
	
	//initiationFeeBracketAmt
	def initiationFeeBracketAmt = context.expand( '${ProductInfo#Response#$[\'initiationFeeBracketAmt\']}' )
	//Label label35ProductInfo = new Label(34, rowsLabel1, "Initiation Fee Bracket Amt");
	Label value35ProductInfo = new Label(34, rowsValue1, initiationFeeBracketAmt);
	//sheet1.addCell(label35ProductInfo);
	sheet1.addCell(value35ProductInfo);
	
	//riskCategory
	def riskCategory = context.expand( '${ProductInfo#Response#$[\'riskCategory\']}' )
	//Label label36ProductInfo = new Label(35, rowsLabel1, "Risk Category");
	Label value36ProductInfo = new Label(35, rowsValue1, riskCategory);
	//sheet1.addCell(label36ProductInfo);
	sheet1.addCell(value36ProductInfo);
	
	//minimumTransferAmount
	def minimumTransferAmount = context.expand( '${ProductInfo#Response#$[\'minimumTransferAmount\']}' )
	//Label label37ProductInfo = new Label(36, rowsLabel1, "Minimum Transfer Amount");
	Label value37ProductInfo = new Label(36, rowsValue1, minimumTransferAmount);
	//sheet1.addCell(label37ProductInfo);
	sheet1.addCell(value37ProductInfo);
	
	//contractedCapital
	def contractedCapital = context.expand( '${ProductInfo#Response#$[\'contractedCapital\']}' )
	//Label label38ProductInfo = new Label(37, rowsLabel1, "Contracted Capital");
	Label value38ProductInfo = new Label(37, rowsValue1, contractedCapital);
	//sheet1.addCell(label38ProductInfo);
	sheet1.addCell(value38ProductInfo);
	
	//contractedTerm
	def contractedTerm = context.expand( '${ProductInfo#Response#$[\'contractedTerm\']}' )
	//Label label39ProductInfo = new Label(38, rowsLabel1, "Contracted Term");
	Label value39ProductInfo = new Label(38, rowsValue1, contractedTerm);
	//sheet1.addCell(label39ProductInfo);
	sheet1.addCell(value39ProductInfo);
	
	//contractCapitalDate
	def contractCapitalDate = context.expand( '${ProductInfo#Response#$[\'contractCapitalDate\']}' )
	//Label label40ProductInfo = new Label(39, rowsLabel1, "Contract Capital Date");
	Label value40ProductInfo = new Label(39, rowsValue1, contractCapitalDate);
	//sheet1.addCell(label40ProductInfo);
	sheet1.addCell(value40ProductInfo);
	
	//collectionDate
	def collectionDate = context.expand( '${ProductInfo#Response#$[\'collectionDate\']}' )
	//Label label41ProductInfo = new Label(40, rowsLabel1, "Collection Date");
	Label value41ProductInfo = new Label(40, rowsValue1, collectionDate);
	//sheet1.addCell(label41ProductInfo);
	sheet1.addCell(value41ProductInfo);
	
	//contractedRepayment
	def contractedRepayment = context.expand( '${ProductInfo#Response#$[\'contractedRepayment\']}' )
	//Label label42ProductInfo = new Label(41, rowsLabel1, "Contracted Repayment");
	Label value42ProductInfo = new Label(41, rowsValue1, contractedRepayment);
	//sheet1.addCell(label42ProductInfo);
	sheet1.addCell(value42ProductInfo);
	
	//suspensiveCondition
	def suspensiveCondition = context.expand( '${ProductInfo#Response#$[\'suspensiveCondition\']}' )
	//Label label43ProductInfo = new Label(42, rowsLabel1, "Suspensive Condition");
	Label value43ProductInfo = new Label(42, rowsValue1, suspensiveCondition);
	//sheet1.addCell(label43ProductInfo);
	sheet1.addCell(value43ProductInfo);
	if(suspensiveCondition.equals("Y")) {
		log.info "FAIL: Client has a suspensive condition."
		//testRunner.fail(testRunner.testCase.name + " Failed: Client has a suspensive condition.")
	}
	
	//ccsStatus
	def ccsStatus = context.expand( '${ProductInfo#Response#$[\'ccsStatus\']}' )
	//Label label44ProductInfo = new Label(43, rowsLabel1, "CCS Status");
	Label value44ProductInfo = new Label(43, rowsValue1, ccsStatus);
	//sheet1.addCell(label44ProductInfo);
	sheet1.addCell(value44ProductInfo);
	
	//deActiveDate
	def deActiveDate = context.expand( '${ProductInfo#Response#$[\'deActiveDate\']}' )
	//Label label45ProductInfo = new Label(44, rowsLabel1, "Deactive Date");
	Label value45ProductInfo = new Label(44, rowsValue1, deActiveDate);
	//sheet1.addCell(label45ProductInfo);
	sheet1.addCell(value45ProductInfo);
	
	//suspensiveDate
	def suspensiveDate = context.expand( '${ProductInfo#Response#$[\'suspensiveDate\']}' )
	//Label label46ProductInfo = new Label(45, rowsLabel1, "Suspensive Date");
	Label value46ProductInfo = new Label(45, rowsValue1, suspensiveDate);
	//sheet1.addCell(label46ProductInfo);
	sheet1.addCell(value46ProductInfo);
	
	//loanStop
	def loanStop = context.expand( '${ProductInfo#Response#$[\'loanStop\']}' )
	//Label label47ProductInfo = new Label(46, rowsLabel1, "Loan Stop");
	Label value47ProductInfo = new Label(46, rowsValue1, loanStop);
	//sheet1.addCell(label47ProductInfo);
	sheet1.addCell(value47ProductInfo);
	
	//clientUnderAdminstration
	def clientUnderAdminstration = context.expand( '${ProductInfo#Response#$[\'clientUnderAdminstration\']}' )
	//Label label48ProductInfo = new Label(47, rowsLabel1, "Client Under Adminstration");
	Label value48ProductInfo = new Label(47, rowsValue1, clientUnderAdminstration);
	//sheet1.addCell(label48ProductInfo);
	sheet1.addCell(value48ProductInfo);
	
	//afInArrears
	def afInArrears = context.expand( '${ProductInfo#Response#$[\'afInArrears\']}' )
	//Label label49ProductInfo = new Label(48, rowsLabel1, "AF In Arrears");
	Label value49ProductInfo = new Label(48, rowsValue1, afInArrears);
	//sheet1.addCell(label49ProductInfo);
	sheet1.addCell(value49ProductInfo);
	
	//unEmployed
	def unEmployed = context.expand( '${ProductInfo#Response#$[\'unEmployed\']}' )
	//Label label50ProductInfo = new Label(49, rowsLabel1, "Unemployed");
	Label value50ProductInfo = new Label(49, rowsValue1, unEmployed);
	//sheet1.addCell(label50ProductInfo);
	sheet1.addCell(value50ProductInfo);
	
	//debtRestructuring
	def debtRestructuring = context.expand( '${ProductInfo#Response#$[\'debtRestructuring\']}' )
	//Label label51ProductInfo = new Label(50, rowsLabel1, "Debt Restructuring");
	Label value51ProductInfo = new Label(50, rowsValue1, debtRestructuring);
	//sheet1.addCell(label51ProductInfo);
	sheet1.addCell(value51ProductInfo);
	
	//otherAccountInArrears
	def otherAccountInArrears = context.expand( '${ProductInfo#Response#$[\'otherAccountInArrears\']}' )
	//Label label52ProductInfo = new Label(51, rowsLabel1, "Other Account In Arrears");
	Label value52ProductInfo = new Label(51, rowsValue1, otherAccountInArrears);
	//sheet1.addCell(label52ProductInfo);
	sheet1.addCell(value52ProductInfo);
	
	//TRANSFER
	
	//Sheet2
	sheet2 = workbook1.getSheet(1)
	newRow2 = sheet2.rows
	//rowsLabel2 = newRow2 + 1
	rowsValue2 = newRow2
	
	//Customer Number
	//Label label1Transfer = new Label(0, rowsLabel2, "Customer Number");
	Label value1Transfer = new Label(0, rowsValue2, customerNumber);
	//sheet2.addCell(label1Transfer);
	sheet2.addCell(value1Transfer);
	
	//fromAccount
	def fromAccount = context.expand( '${Transfer#Response#$[\'fromAccount\']}' )
	//Label label2Transfer = new Label(1, rowsLabel2, "From Account");
	Label value2Transfer = new Label(1, rowsValue2, fromAccount);
	//sheet2.addCell(label2Transfer);
	sheet2.addCell(value2Transfer);
	
	//toAccount
	def toAccount = context.expand( '${Transfer#Response#$[\'toAccount\']}' )
	//Label label3Transfer = new Label(2, rowsLabel2, "To Account");
	Label value3Transfer = new Label(2, rowsValue2, toAccount);
	//sheet2.addCell(label3Transfer);
	sheet2.addCell(value3Transfer);
	
	//transferAmount
	def transferAmount = context.expand( '${Transfer#Response#$[\'transferAmount\']}' )
	//Label label4Transfer = new Label(3, rowsLabel2, "Transfer Amount");
	Label value4Transfer = new Label(3, rowsValue2, transferAmount);
	//sheet2.addCell(label4Transfer);
	sheet2.addCell(value4Transfer);
	
	//paymentPlan
	//Label label5Transfer = new Label(4, rowsLabel2, "Payment Plan");
	Label value5Transfer = new Label(4, rowsValue2, "-");
	//sheet2.addCell(label5Transfer);
	sheet2.addCell(value5Transfer);
	
	//firstInstalmentDate1
	def firstInstalmentDate1 = context.expand( '${Transfer#Response#$[\'paymentPlan\'][0][\'firstInstalmentDate\']}' )
	//Label label6Transfer = new Label(5, rowsLabel2, "First Instalment Date 1");
	Label value6Transfer = new Label(5, rowsValue2, firstInstalmentDate1);
	//sheet2.addCell(label6Transfer);
	sheet2.addCell(value6Transfer);
	
	//noOfInstalments1
	def noOfInstalments1 = context.expand( '${Transfer#Response#$[\'paymentPlan\'][0][\'noOfInstalments\']}' )
	//Label label7Transfer = new Label(6, rowsLabel2, "No Of Instalments 1");
	Label value7Transfer = new Label(6, rowsValue2, noOfInstalments1);
	//sheet2.addCell(label7Transfer);
	sheet2.addCell(value7Transfer);
	
	//instalmentAmount1
	def instalmentAmount1 = context.expand( '${Transfer#Response#$[\'paymentPlan\'][0][\'instalmentAmount\']}' )
	//Label label8Transfer = new Label(7, rowsLabel2, "Instalment Amount 1");
	Label value8Transfer = new Label(7, rowsValue2, instalmentAmount1);
	//sheet2.addCell(label8Transfer);
	sheet2.addCell(value8Transfer);
	
	//firstInstalmentDate2
	def firstInstalmentDate2 = context.expand( '${Transfer#Response#$[\'paymentPlan\'][1][\'firstInstalmentDate\']}' )
	//Label label9Transfer = new Label(8, rowsLabel2, "First Instalment Date 2");
	Label value9Transfer = new Label(8, rowsValue2, firstInstalmentDate2);
	//sheet2.addCell(label9Transfer);
	sheet2.addCell(value9Transfer);
	
	//noOfInstalments2
	def noOfInstalments2 = context.expand( '${Transfer#Response#$[\'paymentPlan\'][1][\'noOfInstalments\']}' )
	//Label label10Transfer = new Label(9, rowsLabel2, "No Of Instalments 2");
	Label value10Transfer = new Label(9, rowsValue2, noOfInstalments2);
	//sheet2.addCell(label10Transfer);
	sheet2.addCell(value10Transfer);
	
	//instalmentAmount2
	def instalmentAmount2 = context.expand( '${Transfer#Response#$[\'paymentPlan\'][1][\'instalmentAmount\']}' )
	//Label label11Transfer = new Label(10, rowsLabel2, "Instalment Amount 2");
	Label value11Transfer = new Label(10, rowsValue2, instalmentAmount2);
	//sheet2.addCell(label11Transfer);
	sheet2.addCell(value11Transfer);	
	
	//Database BEFORE
	
	//Sheet3
	sheet3 = workbook1.getSheet( 2 )
	newRow3 = sheet3.rows
	//rowsLabel3 = newRow3 + 1
	rowsValue3 = newRow3
	
	//Customer Number
	//Label label1Before = new Label(0, rowsLabel2, "Customer Number");
	Label value1Before = new Label(0, rowsValue2, customerNumber);
	//sheet3.addCell(label1Before);
	sheet3.addCell(value1Before);
	
	//CUSTOMER
	def CUSTOMERBefore = context.expand( '${SQLQueryBefore#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/CUSTOMER[1]}' )
	//Label label2Before = new Label(1, rowsLabel3, "CUSTOMER(Before)");
	Label value2Before = new Label(1, rowsValue3, CUSTOMERBefore);
	//sheet3.addCell(label2Before);
	sheet3.addCell(value2Before);
	
	//AFACCT
	def AFACCTBefore = context.expand( '${SQLQueryBefore#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AFACCT[1]}' )
	//Label label3Before = new Label(2, rowsLabel3, "AFACCT(Before)");
	Label value3Before = new Label(2, rowsValue3, AFACCTBefore);
	//sheet3.addCell(label3Before);
	sheet3.addCell(value3Before);
	
	//AFBAL
	def AFBALBefore = context.expand( '${SQLQueryBefore#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AFBAL[1]}' ) //as Double
	//assert AFBALBefore instanceof Double	
	//Label label4Before = new Label(3, rowsLabel3, "AFBAL(Before)");
	Label value4Before = new Label(3, rowsValue3, AFBALBefore);
	//sheet3.addCell(label4Before);
	sheet3.addCell(value4Before);
	
	//AFTHEOBAL
	def AFTHEOBALBefore = context.expand( '${SQLQueryBefore#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AFTHEOBAL[1]}' ) //as Double
	//assert AFTHEOBALBefore instanceof Double
	//Label label5Before = new Label(4, rowsLabel3, "AFTHEOBAL(Before)");
	Label value5Before = new Label(4, rowsValue3, AFTHEOBALBefore);
	//sheet3.addCell(label5Before);
	sheet3.addCell(value5Before);
	
	//SAVACCTBefore
	def SAVACCTBefore = context.expand( '${SQLQueryBefore#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/SAVACCT[1]}' )
	//Label label6Before = new Label(5, rowsLabel3, "SAVACCT(Before)");
	Label value6Before = new Label(5, rowsValue3, SAVACCTBefore);
	//sheet3.addCell(label6Before);
	sheet3.addCell(value6Before);
	
	//SAVBALBefore
	def SAVBALBefore = context.expand( '${SQLQueryBefore#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/SAVBAL[1]}' ) //as Double
	//assert SAVBALBefore instanceof Double
	//Label label7Before = new Label(6, rowsLabel3, "SAVBAL(Before)");
	Label value7Before = new Label(6, rowsValue3, SAVBALBefore);
	//sheet3.addCell(label7Before);
	sheet3.addCell(value7Before);
	
	//CCACCTBefore
	def CCACCTBefore =  context.expand( '${SQLQueryBefore#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/CCACCT[1]}' )
	//Label label8Before = new Label(7, rowsLabel3, "CCACCT(Before)");
	Label value8Before = new Label(7, rowsValue3, CCACCTBefore);
	//sheet3.addCell(label8Before);
	sheet3.addCell(value8Before);
	
	//CCBALBefore
	def CCBALBefore = context.expand( '${SQLQueryBefore#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/CCBAL[1]}' )
	//Label label9Before = new Label(8, rowsLabel3, "CCBAL(Before)");
	Label value9Before = new Label(8, rowsValue3, CCBALBefore);
	//sheet3.addCell(label9Before);
	sheet3.addCell(value9Before);
	
	//INITFEEBefore
	def INITFEEBefore = context.expand( '${SQLQueryBefore#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/INITFEE[1]}' )
	//Label label10Before = new Label(9, rowsLabel3, "INITFEE(Before)");
	Label value10Before = new Label(9, rowsValue3, INITFEEBefore);
	//sheet3.addCell(label10Before);
	sheet3.addCell(value10Before);	
	
	//Database AFTER
	
	//Sheet4
	sheet4 = workbook1.getSheet( 3 )
	newRow4 = sheet4.rows
	//rowsLabel4 = newRow4 + 1
	rowsValue4 = newRow4
	
	//Customer Number
	//Label label1After = new Label(0, rowsLabel2, "Customer Number");
	Label value1After = new Label(0, rowsValue2, customerNumber);
	//sheet4.addCell(label1After);
	sheet4.addCell(value1After);
	
	//CUSTOMERAfter
	def CUSTOMERAfter = context.expand( '${SQLQueryAfter#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/CUSTOMER[1]}' )
	//Label label2After = new Label(1, rowsLabel3, "CUSTOMER(After)");
	Label value2After = new Label(1, rowsValue3, CUSTOMERAfter);
	//sheet4.addCell(label2After);
	sheet4.addCell(value2After);
	
	//AFACCTAfter
	def AFACCTAfter = context.expand( '${SQLQueryAfter#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AFACCT[1]}' )
	//Label label3After = new Label(2, rowsLabel3, "AFACCT(After)");
	Label value3After = new Label(2, rowsValue3, AFACCTAfter);
	//sheet4.addCell(label3After);
	sheet4.addCell(value3After);
	
	//AFBALAfter
	def AFBALAfter = context.expand( '${SQLQueryAfter#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AFBAL[1]}' ) //as Double
	//assert AFBALAfter instanceof Double
	//Label label4After = new Label(3, rowsLabel3, "AFBAL(After)");
	Label value4After = new Label(3, rowsValue3, AFBALAfter);
	//sheet4.addCell(label4After);
	sheet4.addCell(value4After);
	
	//AFTHEOBALAfter
	def AFTHEOBALAfter = context.expand( '${SQLQueryAfter#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AFTHEOBAL[1]}' ) //as Double
	//assert AFTHEOBALAfter instanceof Double
	//Label label5After = new Label(4, rowsLabel3, "AFTHEOBAL(After)");
	Label value5After = new Label(4, rowsValue3, AFTHEOBALAfter);
	//sheet4.addCell(label5After);
	sheet4.addCell(value5After);
	
	//SAVACCTAfter
	def SAVACCTAfter = context.expand( '${SQLQueryAfter#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/SAVACCT[1]}' )
	//Label label6After = new Label(5, rowsLabel3, "SAVACCT(After)");
	Label value6After = new Label(5, rowsValue3, SAVACCTAfter);
	//sheet4.addCell(label6After);
	sheet4.addCell(value6After);
	
	//SAVBALAfter
	def SAVBALAfter = context.expand( '${SQLQueryAfter#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/SAVBAL[1]}' )// as Double
	//assert SAVBALAfter instanceof Double
	//Label label7After = new Label(6, rowsLabel3, "SAVBAL(After)");
	Label value7After = new Label(6, rowsValue3, SAVBALAfter);
	//sheet4.addCell(label7After);
	sheet4.addCell(value7After);
	
	//CCACCTAfter
	def CCACCTAfter =  context.expand( '${SQLQueryAfter#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/CCACCT[1]}' )
	//Label label8After = new Label(7, rowsLabel3, "CCACCT(After)");
	Label value8After = new Label(7, rowsValue3, CCACCTAfter);
	//sheet4.addCell(label8After);
	sheet4.addCell(value8After);
	
	//CCBALAfter
	def CCBALAfter = context.expand( '${SQLQueryAfter#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/CCBAL[1]}' )
	//Label label9After = new Label(8, rowsLabel3, "CCBAL(After)");
	Label value9After = new Label(8, rowsValue3, CCBALAfter);
	//sheet4.addCell(label9After);
	sheet4.addCell(value9After);
	
	//INITFEEAfter
	def INITFEEAfter = context.expand( '${SQLQueryAfter#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/INITFEE[1]}' )
	//Label label10After = new Label(9, rowsLabel3, "INITFEE(After)");
	Label value10After = new Label(9, rowsValue3, INITFEEAfter);
	//sheet4.addCell(label10After);
	sheet4.addCell(value10After);

	//Validation
	/*
	//CIF
	if(CUSTOMERBefore.equals(CUSTOMERAfter)) {
		log.info "PASS: Client CIF is the same."
		def ResultCUSTOMER = "PASS"
	} else {
		log.info "FAIL: Client CIF is not the same, Before:'${customerBefore}' does not match After:'${customerAfter}'."
		def ResultCUSTOMER = "FAIL"
	}
		
	//AF Account
	if(AFACCTBefore.equals(AFACCTAfter)) {
		log.info "PASS: Client AF account is the same."
		def ResultAFACCT = "PASS"
	} else {
		log.info "FAIL: Client AF account is not the same, Before:'${afacctBefore}' does not match After:'${afacctAfter}'."
		def ResultAFACCT = "FAIL"
	}
	
	//AF Balance
	def afbaldiffTotal = (AFBALAfter - AFBALBefore)
	if(AFBALBefore.equals(AFBALAfter)) {
		log.info "FAIL: Client AF balance is the same, transfer did not occur."
		def ResultAFBAL = "FAIL"
	} else {
		log.info "PASS: Client AF balance is not the same, Before:'${afbalBefore}' does not match After:'${afbalAfter}'."
		log.info "PASS: Client AF balance difference = '${afbaldiffTotal}'."
		def ResultAFBAL = "PASS"
	}
	
	//AF Theo Balance
	def aftheodiffTotal = (AFTHEOBALAfter - AFTHEOBALBefore)
	if(AFTHEOBALBefore.equals(AFTHEOBALAfter)) {
		log.info "FAIL: Client AF theo balance is the same, transfer did not occur."
		def ResultAFTHEOBAL = "FAIL"
	} else {
		log.info "PASS: Client AF theo balance is not the same, Before:'${aftheobalBefore}' does not match After:'${aftheobalAfter}'."
		log.info "PASS: Client AF theo balance difference = '${aftheodiffTotal} '."
		def ResultAFTHEOBAL = "PASS"
	}
	
	//Sav Acc
	if(SAVACCTBefore.equals(SAVACCTAfter)) {
		log.info "PASS: Client savings account is the same."
		def ResultSAVACCT = "PASS"
	} else {
		log.info "FAIL: Client savings account is not the same, Before:'${savacctBefore}' does not match After:'${savacctAfter}'."
		def ResultSAVACCT = "FAIL"
	}
	
	//Sav Bal
	def savbaldiffTotal = (SAVBALAfter - SAVBALBefore)
	if(SAVBALBefore.equals(SAVBALAfter)) {
		log.info "FAIL: Client AF theo balance is the same."
		def ResultSAVBAL = "FAIL"
	} else {
		log.info "PASS: Client savings balance is not the same, Before:'${savbalBefore}' does not match After:'${savbalAfter}'."
		log.info "PASS: Client savings balance difference = '${savbaldiffTotal} '."
		def ResultSAVBAL = "PASS"
	}

	//Result log
	if (ResultCUSTOMER.equals("FAIL")){
		def RESULT = "FAIL"
		Label value12Transfer = new Label(11, rowsValue2, RESULT);
		sheet2.addCell(value12Transfer);	
	}else if(ResultAFACCT.equals("FAIL")){
		def RESULT = "FAIL"
		Label value13Transfer = new Label(11, rowsValue2, RESULT);
		sheet2.addCell(value13Transfer);	
	}else if(ResultAFBAL.equals("FAIL")){
		def RESULT = "FAIL"
		Label value14Transfer = new Label(11, rowsValue2, RESULT);
		sheet2.addCell(value14Transfer);	
	}else if(ResultAFTHEOBAL.equals("FAIL")){
		def RESULT = "FAIL"
		Label value15Transfer = new Label(11, rowsValue2, RESULT);
		sheet2.addCell(value15Transfer);	
	}else if(ResultSAVACCT.equals("FAIL")){
		def RESULT = "FAIL"
		Label value16Transfer = new Label(11, rowsValue2, RESULT);
		sheet2.addCell(value16Transfer);	
	}else if(ResultSAVBAL.equals("FAIL")){
		def RESULT = "FAIL"
		Label value17Transfer = new Label(11, rowsValue2, RESULT);
		sheet2.addCell(value17Transfer);	
	}else{
		def RESULT = "PASS"
		Label value18Transfer = new Label(11, rowsValue2, RESULT);
		sheet2.addCell(value18Transfer);	
	}
	*/
	workbook1.write()
	workbook1.close()
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="datasourceloop" name="DataSource Loop" id="c5a4be62-9abd-4f4f-abdf-8a811c76ed49">
    <con:settings/>
    <con:config>
      <dataSourceStep>DataSource</dataSourceStep>
      <targetStep>ProductInfo</targetStep>
      <discardResults>false</discardResults>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Validation" id="90612b9d-0ec4-4cb9-a65f-27e6592e9691" disabled="true">
    <con:settings/>
    <con:config>
      <script>import groovy.xml.*
import groovy.json.*

//CIF
def customerBefore = context.expand( '${SaveSQLDataBefore#CUSTOMER(BeforeTransfer)}' )
def customerAfter = context.expand( '${SaveSQLDataAfter#CUSTOMER(AfterTransfer)}' )
if(customerBefore.equals(customerAfter)) {
	log.info "PASS: Client CIF is the same."
} else {
	log.info "FAIL: Client CIF is not the same, Before:'${customerBefore}' does not match After:'${customerAfter}'."
	testRunner.fail(testRunner.testCase.name + " Failed: Client CIF is not the same, Before:'${customerBefore}' does not match After:'${customerAfter}'.")
}

//AF Account
def afacctBefore = context.expand( '${SaveSQLDataBefore#AFACCT(BeforeTransfer)}' )
def afacctAfter = context.expand( '${SaveSQLDataAfter#AFACCT(AfterTransfer)}' )
if(afacctBefore.equals(afacctAfter)) {
	log.info "PASS: Client AF account is the same."
} else {
	log.info "FAIL: Client AF account is not the same, Before:'${afacctBefore}' does not match After:'${afacctAfter}'."
	testRunner.fail(testRunner.testCase.name + " Failed: Client AF account is not the same, Before:'${afacctBefore}' does not match After:'${afacctAfter}'." )
}

//AF Balance
def afbalBefore = context.expand( '${SaveSQLDataBefore#AFBAL(BeforeTransfer)}') as Double
assert afbalBefore instanceof Double

def afbalAfter = context.expand( '${SaveSQLDataAfter#AFBAL(AfterTransfer)}' ) as Double
assert afbalAfter instanceof Double

def afbaldiffTotal = (afbalAfter - afbalBefore)
if(afbalBefore.equals(afbalAfter)) {
	log.info "FAIL: Client AF balance is the same, transfer did not occur."
	testRunner.fail(testRunner.testCase.name + " Failed: Client AF balance is the same, transfer did not occur." )
} else {
	log.info "PASS: Client AF balance is not the same, Before:'${afbalBefore}' does not match After:'${afbalAfter}'."
	log.info "PASS: Client AF balance difference = '${afbaldiffTotal}'."
}

//AF Theo Balance
def aftheobalBefore = context.expand( '${SaveSQLDataBefore#AFTHEOBAL(BeforeTransfer)}' ) as Double
assert aftheobalBefore instanceof Double
def aftheobalAfter = context.expand( '${SaveSQLDataAfter#AFTHEOBAL(AfterTransfer)}' ) as Double
assert aftheobalAfter instanceof Double

def aftheodiffTotal = (aftheobalAfter - aftheobalBefore)
if(aftheobalBefore.equals(aftheobalAfter)) {
	log.info "FAIL: Client AF theo balance is the same, transfer did not occur.."
	testRunner.fail(testRunner.testCase.name + " Failed: Client AF theo balance is the same, transfer did not occur." )
} else {
	log.info "PASS: Client AF theo balance is not the same, Before:'${aftheobalBefore}' does not match After:'${aftheobalAfter}'."
	log.info "PASS: Client AF theo balance difference = '${aftheodiffTotal} '."
}

//Sav Acc
def savacctBefore = context.expand( '${SaveSQLDataBefore#SAVACCT(BeforeTransfer)}' )
def savacctAfter = context.expand( '${SaveSQLDataAfter#SAVACCT(AfterTransfer)}' )
if(savacctBefore.equals(savacctAfter)) {
	log.info "PASS: Client savings account is the same."
} else {
	log.info "FAIL: Client savings account is not the same, Before:'${savacctBefore}' does not match After:'${savacctAfter}'."
	testRunner.fail(testRunner.testCase.name + " Failed: Client savings account is not the same, Before:'${savacctBefore}' does not match After:'${savacctAfter}'." )
}

//Sav Bal
def savbalBefore = context.expand( '${SaveSQLDataBefore#SAVBAL(BeforeTransfer)}' ) as Double
assert savbalBefore instanceof Double
def savbalAfter = context.expand( '${SaveSQLDataAfter#SAVBAL(AfterTransfer)}' ) as Double
assert savbalAfter instanceof Double
def savbaldiffTotal = (savbalAfter - savbalBefore)
if(savbalBefore.equals(savbalAfter)) {
	log.info "FAIL: Client AF theo balance is the same."
} else {
	log.info "PASS: Client savings balance is not the same, Before:'${savbalBefore}' does not match After:'${savbalAfter}'."
	log.info "PASS: Client savings balance difference = '${savbaldiffTotal} '."
}</script>
    </con:config>
  </con:testStep>
  <con:properties>
    <con:property>
      <con:name>JSONMessageProperty</con:name>
      <con:value>{"fromAccount": "","toAccount": "","transferAmount": "1000","statementDescription": "Access Facility Transfer","repaymentNoOfInstalment": "","repaymentInstalmentAmount": "","paymentPlan": [ { "firstInstalmentDate": "","noOfInstalments": "","instalmentAmount": "" } ] }</con:value>
    </con:property>
    <con:property>
      <con:name>URLEncoded</con:name>
      <con:value>grant_type=password&amp;username=CP343094&amp;password=Vadyca#33</con:value>
    </con:property>
  </con:properties>
  <con:reportParameters/>
  <con:breakPoints>
    <con:testStepId>808c62f4-2727-47df-8953-e237ccf23df0</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>7a65f3f7-978f-45c9-aca5-56385bd329c2</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>fde26f61-8654-46bc-9864-71c3eadeaccc</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>7314a8d8-16b5-442a-bd7c-d2ba1fddc5ba</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>30a13eb1-1abc-44b3-8457-9e416891730d</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>02cffda5-0039-4674-a19f-8f56abbbec54</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>23d10f5d-7254-4d86-b20f-8e22d4af3646</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>7f03863b-69d4-4682-88c8-e1c39b3e49d2</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>4bbbf643-3d93-4e4e-a716-56e59b3ffc6e</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>7d19755f-2a86-4ec6-ad4a-42e510fe61cc</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>adc0be39-f3ff-4cf5-b4f2-c76ade8aa04a</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>e91d055f-cdc1-4064-9d44-7b9edfd79356</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>1df709cd-4458-4b12-a738-2980ac0d2671</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>306d8158-2aaf-435f-8b45-94561bfc9b15</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>6b2fc545-f5bc-458a-b7ff-8654bf610e7a</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>e4f94a4e-9107-4a1a-9fa3-6f08c2f16173</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>201ec0a3-28e3-4dc2-9615-d853d0597ecb</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>08913eff-b91b-429e-bcd3-0a9ddc7b0c64</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>41b44d3c-f6db-4a59-8018-322b8ea9ed01</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>6381824a-a04a-4327-b96f-b9fffb7e7157</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>09a2448a-4f8f-4284-b567-de579b01a084</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>376505a7-8786-400d-a282-d8bc0c993001</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>cd45b085-76b8-4d65-9ff3-da4669d03005</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>8a57b4d1-18e9-4be9-a2d5-cece5f1e362e</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>19c95041-75e9-494a-9a39-82a09292a32f</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>0ba66007-61dc-4960-bcc6-478e4b9600ce</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>dee11dcf-945e-4536-b9be-cc82910a0746</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>3f46a135-6c37-430a-93ab-a7992c1415c6</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>4a45ab3b-33cd-4052-99ec-f9c7673ce365</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>2b072c94-fb64-4f64-92a5-8050252a7d76</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>ddc65946-1f45-4736-a568-6831facba8ba</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>500df8ae-2002-4065-8cf1-922fb532dd6f</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>939bb9c4-a414-45e3-8073-2aacb55651c1</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>24d7aa60-5caf-418a-9790-75192d8203b0</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>9ef56dc6-5698-4e34-b459-b69a0c786439</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>c5a4be62-9abd-4f4f-abdf-8a811c76ed49</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
</con:testCase>
