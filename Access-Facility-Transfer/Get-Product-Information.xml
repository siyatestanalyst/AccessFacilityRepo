<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="e527049a-30f5-4e5c-b1b0-533c6bd4ecdd" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="Get Product Information" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" zephyrTestName="" zephyrTestId="" maxResults="0" disabled="true" xmlns:con="http://eviware.com/soapui/config">
  <con:description>Gets AF Operatable Account and Product Details.</con:description>
  <con:settings>
    <con:setting id="e527049a-30f5-4e5c-b1b0-533c6bd4ecddfileName">Get-Product-Information</con:setting>
  </con:settings>
  <con:savedRecentRuns>1</con:savedRecentRuns>
  <con:testStep type="datasource" name="UsernamePasswordDataSource" id="bf0b7cd3-68ad-4ca5-b1ab-c348e8a7face">
    <con:settings/>
    <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dataSource type="Excel">
        <con:configuration>
          <file>O:/UAT/Test Automation/CVS New Credit Products/Credit Product Service/UsernamePassword.xlsx</file>
          <worksheet>Sheet1</worksheet>
          <cell>A2</cell>
          <ignoreEmpty>false</ignoreEmpty>
          <evaluateFormulas>false</evaluateFormulas>
        </con:configuration>
      </con:dataSource>
      <con:shared>false</con:shared>
      <con:restartShared>true</con:restartShared>
      <con:property>grant_type</con:property>
      <con:property>username</con:property>
      <con:property>password</con:property>
      <con:startRow/>
      <con:endRow/>
      <con:recordsPerIteration>1</con:recordsPerIteration>
      <con:completeLastOperation>true</con:completeLastOperation>
      <con:failOnEmpty>true</con:failOnEmpty>
      <con:trimValues>true</con:trimValues>
      <con:entitizeValues>false</con:entitizeValues>
      <con:restartOnRun>true</con:restartOnRun>
      <con:expandProperties>false</con:expandProperties>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="UsernamePassword" id="b47dac14-9591-46de-9c6c-902429515776">
    <con:settings/>
    <con:config>
      <script>//Get URL Encoded
def grant_type = context.expand( '${UsernamePasswordDataSource#grant_type}' )
def username = context.expand( '${UsernamePasswordDataSource#username}' )
def password = context.expand( '${UsernamePasswordDataSource#password}' )

//Build URLEncoded
//grant_type=password&amp;username=CP343094&amp;password=Vadyca!22
def URLEncoded = ('grant_type='+grant_type+'&amp;username='+username+'&amp;password='+password)
log.info(URLEncoded)
//Create variable 
testRunner.testCase.setPropertyValue( "URLEncoded", URLEncoded )</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="Token" id="d4b61012-3dd3-4160-bd23-c4f00074ecc0">
    <con:settings/>
    <con:config service="AccessToken" resourcePath="/token" methodName="Token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="Token" id="3fff67e7-5a37-44b8-8893-cbce56d10cf0" mediaType="Form URL Encoded" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/x-www-form-urlencoded" xmlns="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>https://idp-non-prod.int.capinet/auth/realms/DEV/protocol/openid-connect</con:endpoint>
        <con:request>${#TestCase#URLEncoded}</con:request>
        <con:originalUri>https://idp-non-prod.int.capinet/auth/realms/DEV/protocol/openid-connect/token</con:originalUri>
        <con:assertion type="JsonPath Existence Match" id="bc731ccc-e45b-4121-969b-7b4dde6be7e9" name="Check for existence of [access_token]">
          <con:configuration>
            <path>$['access_token']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:username>Platform-DEV</con:username>
          <con:password>5d2448d6-205a-489a-937e-fa2479521bfd</con:password>
          <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
          <con:preemptive>true</con:preemptive>
          <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
          <con:authType>Preemptive</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
        <con:parameterOrder/>
        <con:environmentSpec>
          <con:entry environmentId="d762859b-28b7-4b5a-be3e-b89bb67042dc">
            <con:authProfile>Basic</con:authProfile>
            <con:username>Platform-DEV</con:username>
            <con:password>5d2448d6-205a-489a-937e-fa2479521bfd</con:password>
            <con:preemptive>true</con:preemptive>
          </con:entry>
          <con:entry environmentId="c6d10c3f-13fd-496d-a352-d5e1b3ffb3e4">
            <con:authProfile>Basic</con:authProfile>
            <con:username>Platform-INT</con:username>
            <con:password>3a6198ea-eed5-43b2-bee2-a5a4895096ec</con:password>
            <con:preemptive>true</con:preemptive>
          </con:entry>
          <con:entry environmentId="abe22d3f-c611-48a2-aa3a-bbb3916687f4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89bfff1c-d314-464e-8dc2-7c368a0011af">
            <con:authProfile>Basic</con:authProfile>
            <con:username>Platform-DEV</con:username>
            <con:password>5d2448d6-205a-489a-937e-fa2479521bfd</con:password>
            <con:preemptive>true</con:preemptive>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="TransferToken" id="eaa5d7c2-4eb0-42b7-8401-af5e379c13f2">
    <con:settings/>
    <con:config>
      <script>//Get token value
def token = context.expand( '${Token#Response#$[\'access_token\']}' )
return 'Bearer ' + token</script>
    </con:config>
  </con:testStep>
  <con:testStep type="datasource" name="DataSource" id="7e2d8081-63e7-437c-89b4-75313994c566">
    <con:settings/>
    <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dataSource type="Excel">
        <con:configuration>
          <file>O:/UAT/Test Automation/CVS New Credit Products/Credit Product Service/ProductInfoBulk.xlsx</file>
          <worksheet>Sheet1</worksheet>
          <cell>A2</cell>
          <ignoreEmpty>false</ignoreEmpty>
          <evaluateFormulas>false</evaluateFormulas>
        </con:configuration>
      </con:dataSource>
      <con:shared>false</con:shared>
      <con:restartShared>true</con:restartShared>
      <con:property>customerNumber</con:property>
      <con:property>transferAmount</con:property>
      <con:property>statementDescription</con:property>
      <con:startRow/>
      <con:endRow/>
      <con:recordsPerIteration>1</con:recordsPerIteration>
      <con:completeLastOperation>true</con:completeLastOperation>
      <con:failOnEmpty>true</con:failOnEmpty>
      <con:trimValues>true</con:trimValues>
      <con:entitizeValues>false</con:entitizeValues>
      <con:restartOnRun>true</con:restartOnRun>
      <con:expandProperties>false</con:expandProperties>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="ProductInfo" id="559332dd-2be3-40c9-85c5-c043ebf6bfaa">
    <con:settings/>
    <con:config service="Access Facility" resourcePath="/access-facility/productInfo" methodName="ProductInfo" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="ProductInfo" id="25faacab-7612-4435-99a3-007ff47aca74" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="sourceSystemIdentifier" value="USSD" xmlns="http://eviware.com/soapui/config"/></con:setting>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:endpoint>https://onramp-int.int.capinet/credit-services/creditproductservice-v1/credit-products/v1/access-facility</con:endpoint>
        <con:request>{\r
   "accountNumber" : "",\r
   "transferAmount" : ""\r
}</con:request>
        <con:originalUri>https://onramp-int.int.capinet/credit-services/creditproductservice-v1/credit-products/v1/access-facility/transfer</con:originalUri>
        <con:assertion type="JsonPath Existence Match" id="d66da373-023f-449b-9b61-b19efb12c2a6" name="Check for existence of [accountNumber]">
          <con:configuration>
            <path>$['accountNumber']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="d0be1a4b-0752-4283-bda3-0d44f9b5abf1" name="Check for existence of [approvedDate]">
          <con:configuration>
            <path>$['approvedDate']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="0bac3ac3-d10d-4de9-a097-ff9ed9dfef04" name="Check for existence of [availableLimit]">
          <con:configuration>
            <path>$['availableLimit']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="97955657-c446-4947-8a76-9dff6086aba5" name="Check for existence of [interestRateYearly]">
          <con:configuration>
            <path>$['interestRateYearly']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="2b469790-cc56-4d0e-8974-f02d9bf9cc47" name="Check for existence of [accountBalance]">
          <con:configuration>
            <path>$['accountBalance']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="17f0f37d-5a69-44c9-ad1c-8e809851ef11" name="Check for existence of [availableToTransfer]">
          <con:configuration>
            <path>$['availableToTransfer']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="b1695fd5-c56f-41b2-b68b-5077e9bce9ad" name="Check for existence of [remainingTerm]">
          <con:configuration>
            <path>$['remainingTerm']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="4307ab89-cf5a-4a71-b9a5-826e24002bc6" name="Check for existence of [nextInstalmentDue]">
          <con:configuration>
            <path>$['nextInstalmentDue']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="f253700a-0421-4e34-b412-0d4bb773b308" name="Check for existence of [nextInstalmentDate]">
          <con:configuration>
            <path>$['nextInstalmentDate']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="0751e283-a671-4474-a8a7-c2a646bd6631" name="Check for existence of [autoLimitIncrease]">
          <con:configuration>
            <path>$['autoLimitIncrease']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="383e0422-831b-482f-ba11-b24dc6c0bc56" name="Check for existence of [monthlyServiceFee]">
          <con:configuration>
            <path>$['monthlyServiceFee']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="737626d8-ec94-49ac-8340-621b714ba2fb" name="Check for existence of [minimumTerm]">
          <con:configuration>
            <path>$['minimumTerm']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="3284d06a-3ee9-49bc-8bf9-6771dc5f3fa8" name="Check for existence of [maximumTerm]">
          <con:configuration>
            <path>$['maximumTerm']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="ab1984d2-611f-4f8b-8b3f-4fc6dfd60e81" name="Check for existence of [minimumTransferAmount]">
          <con:configuration>
            <path>$['minimumTransferAmount']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="40715926-3258-4a50-9b54-d628c4877084" name="Check for existence of [maximumRepayment]">
          <con:configuration>
            <path>$['maximumRepayment']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="20ee2386-3fe6-4085-b00b-e7f1571bfbd4" name="Check for existence of [termBasis]">
          <con:configuration>
            <path>$['termBasis']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="cb110b71-60e9-46e8-be24-3e1b235f5e92" name="Check for existence of [lastArrearsDate]">
          <con:configuration>
            <path>$['lastArrearsDate']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="dee5ccc1-0129-4fec-80af-e3b707c222d3" name="Check for existence of [decemberArrears]">
          <con:configuration>
            <path>$['decemberArrears']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="88740023-2d4c-4d9a-9e32-860b4e88afdf" name="Check for existence of [totalArrearsPayable]">
          <con:configuration>
            <path>$['totalArrearsPayable']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="9e16e8a5-4c42-4a40-abd8-2c2160e133f0" name="Check for existence of [productInsurance]">
          <con:configuration>
            <path>$['productInsurance']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters>
          <con:entry key="Authorization" value="${TransferToken#result}"/>
          <con:entry key="customerNumber" value="${DataSource#customerNumber}"/>
        </con:parameters>
        <con:parameterOrder>
          <con:entry>customerNumber</con:entry>
          <con:entry>Authorization</con:entry>
        </con:parameterOrder>
        <con:environmentSpec>
          <con:entry environmentId="abe22d3f-c611-48a2-aa3a-bbb3916687f4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89bfff1c-d314-464e-8dc2-7c368a0011af">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="ProductInfoSinkData" id="c91e1b41-99ea-4523-92c2-1c13626303c3">
    <con:settings/>
    <con:config>
      <script>import com.eviware.soapui.support.JsonUtil

//Clear property values in datasink
data = context.testCase.getTestStepByName("ProductInfoSaveResponse");
String[] propToRemove = new String[data.getPropertyCount()];
propToRemove = data.getPropertyNames();
for ( int i = 0 ; i &lt; propToRemove.size(); i++ ){
    data.removeProperty( propToRemove[i] );
}

//accountNumber
def accountNumber = context.expand( '${ProductInfo#Response#$[\'accountNumber\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("accountNumber", accountNumber.toString()) 

//approvedDate
def approvedDate = context.expand( '${ProductInfo#Response#$[\'approvedDate\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("approvedDate", approvedDate.toString())

//availableLimit
def availableLimit = context.expand( '${ProductInfo#Response#$[\'availableLimit\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("availableLimit", availableLimit.toString())

//interestRateYearly
def interestRateYearly = context.expand( '${ProductInfo#Response#$[\'interestRateYearly\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("interestRateYearly", interestRateYearly.toString())

//accountBalance
def accountBalance = context.expand( '${ProductInfo#Response#$[\'accountBalance\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("accountBalance", accountBalance.toString())

//availableToTransfer
def availableToTransfer = context.expand( '${ProductInfo#Response#$[\'availableToTransfer\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("availableToTransfer", availableToTransfer.toString())

//remainingTerm
def remainingTerm = context.expand( '${ProductInfo#Response#$[\'remainingTerm\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("remainingTerm", remainingTerm.toString())

//nextInstalmentDue
def nextInstalmentDue = context.expand( '${ProductInfo#Response#$[\'nextInstalmentDue\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("nextInstalmentDue", nextInstalmentDue.toString())

//nextInstalmentDate
def nextInstalmentDate = context.expand( '${ProductInfo#Response#$[\'nextInstalmentDate\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("nextInstalmentDate", nextInstalmentDate.toString())

//autoLimitIncrease
def autoLimitIncrease = context.expand( '${ProductInfo#Response#$[\'autoLimitIncrease\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("autoLimitIncrease", autoLimitIncrease.toString())

//monthlyServiceFee
def monthlyServiceFee = context.expand( '${ProductInfo#Response#$[\'monthlyServiceFee\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("monthlyServiceFee", monthlyServiceFee.toString())

//minimumTerm
def minimumTerm = context.expand( '${ProductInfo#Response#$[\'minimumTerm\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("minimumTerm", minimumTerm.toString())

//maximumTerm
def maximumTerm = context.expand( '${ProductInfo#Response#$[\'maximumTerm\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("maximumTerm", maximumTerm.toString())

//maximumRepayment
def maximumRepayment = context.expand( '${ProductInfo#Response#$[\'maximumRepayment\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("maximumRepayment", maximumRepayment.toString())

//termBasis
def termBasis = context.expand( '${ProductInfo#Response#$[\'termBasis\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("termBasis", termBasis.toString())

//lastArrearsDate
def lastArrearsDate = context.expand( '${ProductInfo#Response#$[\'lastArrearsDate\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("lastArrearsDate", lastArrearsDate.toString())

//decemberArrears
def decemberArrears = context.expand( '${ProductInfo#Response#$[\'decemberArrears\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("decemberArrears", decemberArrears.toString())

//totalArrearsPayable
def totalArrearsPayable = context.expand( '${ProductInfo#Response#$[\'totalArrearsPayable\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("totalArrearsPayable", totalArrearsPayable.toString())

//productInsurance
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("productInsurance", "-".toString())

//insuranceExpiry
def insuranceExpiry = context.expand( '${ProductInfo#Response#$[\'productInsurance\'][\'insuranceExpiry\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("insuranceExpiry", insuranceExpiry.toString()) 

//insuranceDeathRate
def insuranceDeathRate = context.expand( '${ProductInfo#Response#$[\'productInsurance\'][\'insuranceDeathRate\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("insuranceDeathRate", insuranceDeathRate.toString()) 

//insuranceDisabilityRate
def insuranceDisabilityRate = context.expand( '${ProductInfo#Response#$[\'productInsurance\'][\'insuranceDisabilityRate\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("insuranceDisabilityRate", insuranceDisabilityRate.toString()) 

//insuranceRetrenchmentRate
def insuranceRetrenchmentRate = context.expand( '${ProductInfo#Response#$[\'productInsurance\'][\'insuranceRetrenchmentRate\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("insuranceRetrenchmentRate", insuranceRetrenchmentRate.toString()) 

//insuranceOption
def insuranceOption = context.expand( '${ProductInfo#Response#$[\'productInsurance\'][\'insuranceOption\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("insuranceOption", insuranceOption.toString())

//clientName
def clientName = context.expand( '${ProductInfo#Response#$[\'clientName\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("clientName", clientName.toString()) 

//fixedIntiationFee
def fixedInitiationFee = context.expand( '${ProductInfo#Response#$[\'fixedInitiationFee\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("fixedInitiationFee", fixedInitiationFee.toString()) 

//interestRateMargin
def interestRateMargin = context.expand( '${ProductInfo#Response#$[\'interestRateMargin\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("interestRateMargin", interestRateMargin.toString()) 

//maxIntiationFee
def maxInitiationFee = context.expand( '${ProductInfo#Response#$[\'maxInitiationFee\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("maxInitiationFee", maxInitiationFee.toString())

//interestRateType
def interestRateType = context.expand( '${ProductInfo#Response#$[\'interestRateType\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("interestRateType", interestRateType.toString()) 

//initiationFee1
def initiationFee1 = context.expand( '${ProductInfo#Response#$[\'initiationFee1\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("initiationFee1", initiationFee1.toString()) 

//initiationFee2
def initiationFee2 = context.expand( '${ProductInfo#Response#$[\'initiationFee2\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("initiationFee2", initiationFee2.toString()) 

//cummulativeTransferTotal
def cummulativeTransferTotal = context.expand( '${ProductInfo#Response#$[\'cummulativeTransferTotal\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("cummulativeTransferTotal", cummulativeTransferTotal.toString()) 

//nonUsageServiceFee
def nonUsageServiceFee = context.expand( '${ProductInfo#Response#$[\'nonUsageServiceFee\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("nonUsageServiceFee", nonUsageServiceFee.toString()) 

//initiationFeeBracketAmt
def initiationFeeBracketAmt = context.expand( '${ProductInfo#Response#$[\'initiationFeeBracketAmt\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("initiationFeeBracketAmt", initiationFeeBracketAmt.toString()) 

//riskCategory
def riskCategory = context.expand( '${ProductInfo#Response#$[\'riskCategory\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("riskCategory", riskCategory.toString()) 

//minimumTransferAmount
def minimumTransferAmount = context.expand( '${ProductInfo#Response#$[\'minimumTransferAmount\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("minimumTransferAmount", minimumTransferAmount.toString()) 

//contractedCapital
def contractedCapital = context.expand( '${ProductInfo#Response#$[\'contractedCapital\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("contractedCapital", contractedCapital.toString()) 

//contractedTerm
def contractedTerm = context.expand( '${ProductInfo#Response#$[\'contractedTerm\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("contractedTerm", contractedTerm.toString()) 

//contractCapitalDate
def contractCapitalDate = context.expand( '${ProductInfo#Response#$[\'contractCapitalDate\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("contractCapitalDate", contractCapitalDate.toString()) 

//collectionDate
def collectionDate = context.expand( '${ProductInfo#Response#$[\'collectionDate\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("collectionDate", collectionDate.toString()) 

//contractedRepayment
def contractedRepayment = context.expand( '${ProductInfo#Response#$[\'contractedRepayment\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("contractedRepayment", contractedRepayment.toString()) 

//suspensiveCondition
def suspensiveCondition = context.expand( '${ProductInfo#Response#$[\'suspensiveCondition\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("suspensiveCondition", suspensiveCondition.toString()) 
if(suspensiveCondition.equals("Y")) {
	log.info "FAIL: Client has a suspensive condition."
	//testRunner.fail(testRunner.testCase.name + " Failed: Client has a suspensive condition.")
}

//ccsStatus
def ccsStatus = context.expand( '${ProductInfo#Response#$[\'ccsStatus\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("ccsStatus", ccsStatus.toString()) 

//deActiveDate
def deActiveDate = context.expand( '${ProductInfo#Response#$[\'deActiveDate\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("deActiveDate", deActiveDate.toString()) 

//suspensiveDate
def suspensiveDate = context.expand( '${ProductInfo#Response#$[\'suspensiveDate\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("suspensiveDate", suspensiveDate.toString()) 

//loanStop
def loanStop = context.expand( '${ProductInfo#Response#$[\'loanStop\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("loanStop", loanStop.toString()) 

//clientUnderAdminstration
def clientUnderAdminstration = context.expand( '${ProductInfo#Response#$[\'clientUnderAdminstration\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("clientUnderAdminstration", clientUnderAdminstration.toString()) 

//afInArrears
def afInArrears = context.expand( '${ProductInfo#Response#$[\'afInArrears\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("afInArrears", afInArrears.toString()) 

//unEmployed
def unEmployed = context.expand( '${ProductInfo#Response#$[\'unEmployed\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("unEmployed", unEmployed.toString()) 

//debtRestructuring
def debtRestructuring = context.expand( '${ProductInfo#Response#$[\'debtRestructuring\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("debtRestructuring", debtRestructuring.toString()) 

//otherAccountInArrears
def otherAccountInArrears = context.expand( '${ProductInfo#Response#$[\'otherAccountInArrears\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("otherAccountInArrears", otherAccountInArrears.toString())

//addDuesDate
def addDuesDate = context.expand( '${ProductInfo#Response#$[\'addDuesDate\']}' )
testRunner.testCase.testSteps["ProductInfoSaveResponse"].setPropertyValue("addDuesDate", addDuesDate.toString())</script>
    </con:config>
  </con:testStep>
  <con:testStep type="datasink" name="ProductInfoSaveResponse" id="9e281384-0ca7-41b7-965a-41f7c05c469f">
    <con:settings/>
    <con:config xsi:type="con:DataSinkStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dataSink type="Excel">
        <con:configuration>
          <file/>
          <outfile>O:/UAT/Test Automation/CVS New Credit Products/Credit Product Service/ProductInfoBulkResults.xlsx</outfile>
          <worksheet>Sheet1</worksheet>
          <cell>B2</cell>
          <evaluateFormulas>false</evaluateFormulas>
          <append>false</append>
        </con:configuration>
      </con:dataSink>
      <con:shared>false</con:shared>
      <con:properties>
        <con:property>
          <con:name>accountNumber</con:name>
          <con:value>1688736261</con:value>
        </con:property>
        <con:property>
          <con:name>approvedDate</con:name>
          <con:value>2020-01-28</con:value>
        </con:property>
        <con:property>
          <con:name>availableLimit</con:name>
          <con:value>200000.0</con:value>
        </con:property>
        <con:property>
          <con:name>interestRateYearly</con:name>
          <con:value>17.75</con:value>
        </con:property>
        <con:property>
          <con:name>accountBalance</con:name>
          <con:value>139.56</con:value>
        </con:property>
        <con:property>
          <con:name>availableToTransfer</con:name>
          <con:value>199860.44</con:value>
        </con:property>
        <con:property>
          <con:name>remainingTerm</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nextInstalmentDue</con:name>
          <con:value>0.0</con:value>
        </con:property>
        <con:property>
          <con:name>nextInstalmentDate</con:name>
          <con:value>2020-05-20</con:value>
        </con:property>
        <con:property>
          <con:name>autoLimitIncrease</con:name>
          <con:value>N</con:value>
        </con:property>
        <con:property>
          <con:name>monthlyServiceFee</con:name>
          <con:value>69.0</con:value>
        </con:property>
        <con:property>
          <con:name>minimumTerm</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>maximumTerm</con:name>
          <con:value>60</con:value>
        </con:property>
        <con:property>
          <con:name>maximumRepayment</con:name>
          <con:value>200000.0</con:value>
        </con:property>
        <con:property>
          <con:name>termBasis</con:name>
          <con:value>MONTHLY</con:value>
        </con:property>
        <con:property>
          <con:name>lastArrearsDate</con:name>
          <con:value>9999-12-31</con:value>
        </con:property>
        <con:property>
          <con:name>decemberArrears</con:name>
          <con:value>0.0</con:value>
        </con:property>
        <con:property>
          <con:name>totalArrearsPayable</con:name>
          <con:value>136.99</con:value>
        </con:property>
        <con:property>
          <con:name>productInsurance</con:name>
          <con:value>-</con:value>
        </con:property>
        <con:property>
          <con:name>insuranceExpiry</con:name>
          <con:value>0001-01-01</con:value>
        </con:property>
        <con:property>
          <con:name>insuranceDeathRate</con:name>
          <con:value>0.0</con:value>
        </con:property>
        <con:property>
          <con:name>insuranceDisabilityRate</con:name>
          <con:value>0.0</con:value>
        </con:property>
        <con:property>
          <con:name>insuranceRetrenchmentRate</con:name>
          <con:value>0.0</con:value>
        </con:property>
        <con:property>
          <con:name>insuranceOption</con:name>
          <con:value>CAPITEC_BANK_CREDIT_INSURANCE(G)</con:value>
        </con:property>
        <con:property>
          <con:name>clientName</con:name>
          <con:value>MRS AURELIA MANYAKA                            AM</con:value>
        </con:property>
        <con:property>
          <con:name>fixedInitiationFee</con:name>
          <con:value>250.0</con:value>
        </con:property>
        <con:property>
          <con:name>interestRateMargin</con:name>
          <con:value>10.0</con:value>
        </con:property>
        <con:property>
          <con:name>maxInitiationFee</con:name>
          <con:value>250.0</con:value>
        </con:property>
        <con:property>
          <con:name>interestRateType</con:name>
          <con:value>V</con:value>
        </con:property>
        <con:property>
          <con:name>initiationFee1</con:name>
          <con:value>0.0</con:value>
        </con:property>
        <con:property>
          <con:name>initiationFee2</con:name>
          <con:value>0.0</con:value>
        </con:property>
        <con:property>
          <con:name>cummulativeTransferTotal</con:name>
          <con:value>0.0</con:value>
        </con:property>
        <con:property>
          <con:name>nonUsageServiceFee</con:name>
          <con:value>0.0</con:value>
        </con:property>
        <con:property>
          <con:name>initiationFeeBracketAmt</con:name>
          <con:value>0.0</con:value>
        </con:property>
        <con:property>
          <con:name>riskCategory</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>minimumTransferAmount</con:name>
          <con:value>100.0</con:value>
        </con:property>
        <con:property>
          <con:name>contractedCapital</con:name>
          <con:value>0.0</con:value>
        </con:property>
        <con:property>
          <con:name>contractedTerm</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>contractCapitalDate</con:name>
          <con:value>0001-01-01</con:value>
        </con:property>
        <con:property>
          <con:name>collectionDate</con:name>
          <con:value>0001-01-01</con:value>
        </con:property>
        <con:property>
          <con:name>contractedRepayment</con:name>
          <con:value>0.0</con:value>
        </con:property>
        <con:property>
          <con:name>suspensiveCondition</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>ccsStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>deActiveDate</con:name>
          <con:value>0001-01-01</con:value>
        </con:property>
        <con:property>
          <con:name>suspensiveDate</con:name>
          <con:value>0001-01-01</con:value>
        </con:property>
        <con:property>
          <con:name>loanStop</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>clientUnderAdminstration</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>afInArrears</con:name>
          <con:value>Y</con:value>
        </con:property>
        <con:property>
          <con:name>unEmployed</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>debtRestructuring</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>otherAccountInArrears</con:name>
          <con:value/>
        </con:property>
      </con:properties>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="Operations(Transfer)" id="140bcd17-ed0d-4e2b-806a-fb672454274a">
    <con:settings/>
    <con:config service="Access Facility" resourcePath="/access-facility/operations" methodName="Operations" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="Operations(Transfer)" id="4da46116-2d86-4ebf-9368-58f74d8456fd" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${TransferToken#result}"/>
  &lt;con:entry key="sourceSystemIdentifier" value="USSD"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
        <con:endpoint>https://onramp-int.int.capinet/credit-services/creditproductservice-v1/credit-products/v1/access-facility</con:endpoint>
        <con:request>{\r
   "accountNumber" : "",\r
   "transferAmount" : ""\r
}</con:request>
        <con:originalUri>https://onramp-int.int.capinet/credit-services/creditproductservice-v1/credit-products/v1/access-facility/transfer</con:originalUri>
        <con:assertion type="JsonPath Existence Match" id="d69098ec-8b92-43ce-a428-e44332a32664" name="Check for existence of [loanBalance]">
          <con:configuration>
            <path>$['loanBalance']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="fc03a275-5768-4ebe-bf82-45aec7cb1256" name="Check for existence of [originalLimit]">
          <con:configuration>
            <path>$['originalLimit']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="d9b196bd-eae4-4059-a588-83cb8f6f1c68" name="Check for existence of [currentInstalmentDue]">
          <con:configuration>
            <path>$['currentInstalmentDue']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="b05264b4-9b2c-4ce0-ad9d-e5151d59a41f" name="Check for existence of [currentInstalmentDate]">
          <con:configuration>
            <path>$['currentInstalmentDate']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="8415f4d5-c9e5-43e3-9aba-924c15d55297" name="Check for existence of [currentNoOfInstalment]">
          <con:configuration>
            <path>$['currentNoOfInstalment']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="b80121fb-7712-4386-9afc-0a3d3d08a431" name="Check for existence of [followingInstalmentDue]">
          <con:configuration>
            <path>$['followingInstalmentDue']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="eaab4e05-7159-476f-b854-dea4dc41209f" name="Check for existence of [followingInstalmentDate]">
          <con:configuration>
            <path>$['followingInstalmentDate']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="48911d9b-4d80-4953-b700-a5391c3d59d2" name="Check for existence of [followingNoOfInstalment]">
          <con:configuration>
            <path>$['followingNoOfInstalment']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="04f0d4e8-5b93-479e-ae71-03c83d51ec72" name="Check for existence of [availableMinAmount]">
          <con:configuration>
            <path>$['availableMinAmount']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="2c22d68d-0c18-4b64-b62c-cb37103be64e" name="Check for existence of [availableMinTerm]">
          <con:configuration>
            <path>$['availableMinTerm']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="91ec7dde-4ddf-48ba-b0ab-dade466d6ab0" name="Check for existence of [availableMaxAmount]">
          <con:configuration>
            <path>$['availableMaxAmount']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="cbe8e121-b492-4bfe-ad35-e0d505f757d9" name="Check for existence of [availableMaxTerm]">
          <con:configuration>
            <path>$['availableMaxTerm']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="c647bbd7-089d-489c-82cb-4688295d2ba2" name="Check for existence of [operatableAccount]">
          <con:configuration>
            <path>$['operatableAccount']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters>
          <con:entry key="operationIdentifier" value="transfer"/>
          <con:entry key="accountNumber" value="${ProductInfo#Response#$['accountNumber']}"/>
        </con:parameters>
        <con:parameterOrder>
          <con:entry>accountNumber</con:entry>
          <con:entry>operationIdentifier</con:entry>
        </con:parameterOrder>
        <con:environmentSpec>
          <con:entry environmentId="abe22d3f-c611-48a2-aa3a-bbb3916687f4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89bfff1c-d314-464e-8dc2-7c368a0011af">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Operations(Transfer)SinkData" id="95423fe6-9cdd-40e3-84e2-5045516e3c67">
    <con:settings/>
    <con:config>
      <script>import com.eviware.soapui.support.JsonUtil

//Clear property values in datasink
data = context.testCase.getTestStepByName("Operations(Transfer)SaveResponse");
String[] propToRemove = new String[data.getPropertyCount()];
propToRemove = data.getPropertyNames();
for ( int i = 0 ; i &lt; propToRemove.size(); i++ ){
    data.removeProperty( propToRemove[i] );
}

//loanBalance
def loanBalance = context.expand( '${Operations(Transfer)#Response#$[\'loanBalance\']}' )
testRunner.testCase.testSteps["Operations(Transfer)SaveResponse"].setPropertyValue("loanBalance", loanBalance.toString()) 

//originalLimit
def originalLimit = context.expand( '${Operations(Transfer)#Response#$[\'originalLimit\']}' )
testRunner.testCase.testSteps["Operations(Transfer)SaveResponse"].setPropertyValue("originalLimit", originalLimit.toString())

//currentInstalmentDue
def currentInstalmentDue = context.expand( '${Operations(Transfer)#Response#$[\'currentInstalmentDue\']}' )
testRunner.testCase.testSteps["Operations(Transfer)SaveResponse"].setPropertyValue("currentInstalmentDue", currentInstalmentDue.toString())

//currentInstalmentDate
def currentInstalmentDate = context.expand( '${Operations(Transfer)#Response#$[\'currentInstalmentDate\']}' )
testRunner.testCase.testSteps["Operations(Transfer)SaveResponse"].setPropertyValue("currentInstalmentDate", currentInstalmentDate.toString())

//currentNoOfInstalment
def currentNoOfInstalment = context.expand( '${Operations(Transfer)#Response#$[\'currentNoOfInstalment\']}' )
testRunner.testCase.testSteps["Operations(Transfer)SaveResponse"].setPropertyValue("currentNoOfInstalment", currentNoOfInstalment.toString())

//followingInstalmentDue
def followingInstalmentDue = context.expand( '${Operations(Transfer)#Response#$[\'followingInstalmentDue\']}' )
testRunner.testCase.testSteps["Operations(Transfer)SaveResponse"].setPropertyValue("followingInstalmentDue", followingInstalmentDue.toString())

//followingInstalmentDate
def followingInstalmentDate = context.expand( '${Operations(Transfer)#Response#$[\'followingInstalmentDate\']}' )
testRunner.testCase.testSteps["Operations(Transfer)SaveResponse"].setPropertyValue("followingInstalmentDate", followingInstalmentDate.toString())

//followingNoOfInstalment
def followingNoOfInstalment = context.expand( '${Operations(Transfer)#Response#$[\'followingNoOfInstalment\']}' )
testRunner.testCase.testSteps["Operations(Transfer)SaveResponse"].setPropertyValue("followingNoOfInstalment", followingNoOfInstalment.toString())

//availableMinAmount
def availableMinAmount = context.expand( '${Operations(Transfer)#Response#$[\'availableMinAmount\']}' )
testRunner.testCase.testSteps["Operations(Transfer)SaveResponse"].setPropertyValue("availableMinAmount", availableMinAmount.toString())

//availableMinTerm
def availableMinTerm = context.expand( '${Operations(Transfer)#Response#$[\'availableMinTerm\']}' )
testRunner.testCase.testSteps["Operations(Transfer)SaveResponse"].setPropertyValue("availableMinTerm", availableMinTerm.toString())

//availableMaxAmount
def availableMaxAmount = context.expand( '${Operations(Transfer)#Response#$[\'availableMaxAmount\']}' )
testRunner.testCase.testSteps["Operations(Transfer)SaveResponse"].setPropertyValue("availableMaxAmount", availableMaxAmount.toString())

//availableMaxTerm
def availableMaxTerm = context.expand( '${Operations(Transfer)#Response#$[\'availableMaxTerm\']}' )
testRunner.testCase.testSteps["Operations(Transfer)SaveResponse"].setPropertyValue("availableMaxTerm", availableMaxTerm.toString())

//operatableAccount
testRunner.testCase.testSteps["Operations(Transfer)SaveResponse"].setPropertyValue("operatableAccount", "-".toString()) 
def Records = context.expand( '${Operations(Transfer)#Response#$[\'operatableAccount\']}' )
//Records is now a string of all your items in the array
def RecordsArray = JsonUtil.parseTrimmedText(Records );
//Convereted back to an arry
def n = RecordsArray.size()
//Count how many records items  there are in the array
for (int i=0; i&lt; n; i=i+1){
	//Create a for loop to go through all the elements of the array
	def accountName = context.expand( '${Operations(Transfer)#Response#$[\'operatableAccount\']['+i+'][\'accountName\']}' )
	def accountNumber = context.expand( '${Operations(Transfer)#Response#$[\'operatableAccount\']['+i+'][\'accountNumber\']}' )	
	//Log accountName
	testRunner.testCase.testSteps["Operations(Transfer)SaveResponse"].setPropertyValue("accountName"+i, accountName.toString()) 
	//Log accountNumber
	testRunner.testCase.testSteps["Operations(Transfer)SaveResponse"].setPropertyValue("accountNumber"+i, accountNumber.toString()) 
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="datasink" name="Operations(Transfer)SaveResponse" id="49dcd46b-665d-4c5c-881d-6b2c169f1eb0">
    <con:settings/>
    <con:config xsi:type="con:DataSinkStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dataSink type="Excel">
        <con:configuration>
          <file/>
          <outfile>O:/UAT/Test Automation/CVS New Credit Products/Credit Product Service/Operations(Transfer)BulkResults.xlsx</outfile>
          <worksheet>Sheet1</worksheet>
          <cell>B2</cell>
          <evaluateFormulas>false</evaluateFormulas>
          <append>false</append>
        </con:configuration>
      </con:dataSink>
      <con:shared>false</con:shared>
      <con:properties>
        <con:property>
          <con:name>loanBalance</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>originalLimit</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>currentInstalmentDue</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>currentInstalmentDate</con:name>
          <con:value>0001-01-01</con:value>
        </con:property>
        <con:property>
          <con:name>currentNoOfInstalment</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>followingInstalmentDue</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>followingInstalmentDate</con:name>
          <con:value>0001-01-01</con:value>
        </con:property>
        <con:property>
          <con:name>followingNoOfInstalment</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>availableMinAmount</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>availableMinTerm</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>availableMaxAmount</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>availableMaxTerm</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>operatableAccount</con:name>
          <con:value>-</con:value>
        </con:property>
      </con:properties>
    </con:config>
  </con:testStep>
  <con:testStep type="datasourceloop" name="DataLoop" id="ac2991c6-27a5-4705-b18f-655014890da9">
    <con:settings/>
    <con:config>
      <dataSourceStep>DataSource</dataSourceStep>
      <targetStep>ProductInfo</targetStep>
      <discardResults>false</discardResults>
    </con:config>
  </con:testStep>
  <con:properties>
    <con:property>
      <con:name>JSONMessageProperty</con:name>
      <con:value>{"fromAccount": "1688741621","toAccount": "1602825988","transferAmount": "1.0","statementDescription": "Access Facility Transfer","repaymentNoOfInstalment": "47","repaymentInstalmentAmount": "225.03","paymentPlan": [ { "firstInstalmentDate": "2020-02-27","noOfInstalments": "1","instalmentAmount": "225.4" } ] }</con:value>
    </con:property>
    <con:property>
      <con:name>URLEncoded</con:name>
      <con:value>grant_type=password&amp;username=CP343094&amp;password=Vadyca#33</con:value>
    </con:property>
  </con:properties>
  <con:reportParameters/>
  <con:breakPoints>
    <con:testStepId>808c62f4-2727-47df-8953-e237ccf23df0</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>7a65f3f7-978f-45c9-aca5-56385bd329c2</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>fde26f61-8654-46bc-9864-71c3eadeaccc</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>7314a8d8-16b5-442a-bd7c-d2ba1fddc5ba</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>30a13eb1-1abc-44b3-8457-9e416891730d</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>02cffda5-0039-4674-a19f-8f56abbbec54</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>23d10f5d-7254-4d86-b20f-8e22d4af3646</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>7f03863b-69d4-4682-88c8-e1c39b3e49d2</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>4bbbf643-3d93-4e4e-a716-56e59b3ffc6e</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>7d19755f-2a86-4ec6-ad4a-42e510fe61cc</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>adc0be39-f3ff-4cf5-b4f2-c76ade8aa04a</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>e91d055f-cdc1-4064-9d44-7b9edfd79356</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>1df709cd-4458-4b12-a738-2980ac0d2671</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>306d8158-2aaf-435f-8b45-94561bfc9b15</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>6b2fc545-f5bc-458a-b7ff-8654bf610e7a</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>e4f94a4e-9107-4a1a-9fa3-6f08c2f16173</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>201ec0a3-28e3-4dc2-9615-d853d0597ecb</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>08913eff-b91b-429e-bcd3-0a9ddc7b0c64</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>41b44d3c-f6db-4a59-8018-322b8ea9ed01</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>6381824a-a04a-4327-b96f-b9fffb7e7157</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>09a2448a-4f8f-4284-b567-de579b01a084</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>376505a7-8786-400d-a282-d8bc0c993001</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>cd45b085-76b8-4d65-9ff3-da4669d03005</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>8a57b4d1-18e9-4be9-a2d5-cece5f1e362e</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>19c95041-75e9-494a-9a39-82a09292a32f</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>0ba66007-61dc-4960-bcc6-478e4b9600ce</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>dee11dcf-945e-4536-b9be-cc82910a0746</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>3f46a135-6c37-430a-93ab-a7992c1415c6</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>4a45ab3b-33cd-4052-99ec-f9c7673ce365</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>2b072c94-fb64-4f64-92a5-8050252a7d76</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>ddc65946-1f45-4736-a568-6831facba8ba</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>500df8ae-2002-4065-8cf1-922fb532dd6f</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>939bb9c4-a414-45e3-8073-2aacb55651c1</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>ac2991c6-27a5-4705-b18f-655014890da9</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
</con:testCase>
